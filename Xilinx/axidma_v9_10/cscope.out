cscope 15 $HOME/lubin/fpga_spectrometer/rpdma/axidma_v9_10               0000215118
	@xaxidma.c

87 
	~"xaxidma.h
"

93 
	#XAXIDMA_RESET_TIMEOUT
 500

	)

102 
XAxiDma_Sèπ
(
XAxiDma
 * 
In°™˚På
);

103 
XAxiDma_Sèπed
(
XAxiDma
 * 
In°™˚På
);

131 
	$XAxiDma_CfgInôülize
(
XAxiDma
 * 
In°™˚På
, 
XAxiDma_C⁄fig
 *
C⁄fig
)

133 
UINTPTR
 
Ba£Addr
;

134 
TimeOut
;

135 
Index
;

136 
u32
 
MaxTøns„rLí
;

138 
In°™˚På
->
Inôülized
 = 0;

140 if(!
C⁄fig
) {

141  
XST_INVALID_PARAM
;

144 
Ba£Addr
 = 
C⁄fig
->BaseAddr;

147 
	`mem£t
(
In°™˚På
, 0, (
XAxiDma
));

148 
In°™˚På
->
RegBa£
 = 
Ba£Addr
;

152 
In°™˚På
->
HasMm2S
 = 
C⁄fig
->HasMm2S;

153 
In°™˚På
->
HasS2Mm
 = 
C⁄fig
->HasS2Mm;

155 
In°™˚På
->
HasSg
 = 
C⁄fig
->HasSg;

157 
In°™˚På
->
Mi¸oDmaMode
 = 
C⁄fig
->MicroDmaMode;

158 
In°™˚På
->
AddrWidth
 = 
C⁄fig
->AddrWidth;

161 
In°™˚På
->
TxNumCh™√ls
 = 
C⁄fig
->
Mm2sNumCh™√ls
;

162 
In°™˚På
->
RxNumCh™√ls
 = 
C⁄fig
->
S2MmNumCh™√ls
;

165 i‡(!
In°™˚På
->
TxNumCh™√ls
)

166 
In°™˚På
->
TxNumCh™√ls
 = 1;

167 i‡(!
In°™˚På
->
RxNumCh™√ls
)

168 
In°™˚På
->
RxNumCh™√ls
 = 1;

170 i‡((
In°™˚På
->
RxNumCh™√ls
 > 1) ||

171 (
In°™˚På
->
TxNumCh™√ls
 > 1)) {

172 
MaxTøns„rLí
 =

173 
XAXIDMA_MCHAN_MAX_TRANSFER_LEN
;

176 
MaxTøns„rLí
 = (1U << 
C⁄fig
->
SgLígthWidth
) - 1;

180 
In°™˚På
->
TxBdRög
.
RunSèã
 = 
AXIDMA_CHANNEL_HALTED
;

181 
In°™˚På
->
TxBdRög
.
IsRxCh™√l
 = 0;

182 i‡(!
In°™˚På
->
Mi¸oDmaMode
) {

183 
In°™˚På
->
TxBdRög
.
MaxTøns„rLí
 = MaxTransferLen;

189 
In°™˚På
->
TxBdRög
.
MaxTøns„rLí
 =

190 ((
C⁄fig
->
Mm2SD©aWidth
 / 4) *

191 
C⁄fig
->
Mm2SBur°Size
);

193 
In°™˚På
->
TxBdRög
.
RögIndex
 = 0;

195 
Index
 = 0; Index < 
In°™˚På
->
RxNumCh™√ls
; Index++) {

196 
In°™˚På
->
RxBdRög
[
Index
].
RunSèã


197 
AXIDMA_CHANNEL_HALTED
;

198 
In°™˚På
->
RxBdRög
[
Index
].
IsRxCh™√l
 = 1;

199 
In°™˚På
->
RxBdRög
[
Index
].
RögIndex
 = Index;

202 i‡(
In°™˚På
->
HasMm2S
) {

203 
In°™˚På
->
TxBdRög
.
Ch™Ba£
 =

204 
Ba£Addr
 + 
XAXIDMA_TX_OFFSET
;

205 
In°™˚På
->
TxBdRög
.
HasStsC¡æSåm
 =

206 
C⁄fig
->
HasStsC¡æSåm
;

207 i‡(
In°™˚På
->
AddrWidth
 > 32)

208 
In°™˚På
->
TxBdRög
.
Addr_ext
 = 1;

210 
In°™˚På
->
TxBdRög
.
Addr_ext
 = 0;

212 
In°™˚På
->
TxBdRög
.
HasDRE
 = 
C⁄fig
->
HasMm2SDRE
;

213 
In°™˚På
->
TxBdRög
.
D©aWidth
 =

214 (()
C⁄fig
->
Mm2SD©aWidth
 >> 3);

217 i‡(
In°™˚På
->
HasS2Mm
) {

218 
Index
 = 0;

219 
Index
 < 
In°™˚På
->
RxNumCh™√ls
; Index++) {

220 
In°™˚På
->
RxBdRög
[
Index
].
Ch™Ba£
 =

221 
Ba£Addr
 + 
XAXIDMA_RX_OFFSET
;

222 
In°™˚På
->
RxBdRög
[
Index
].
HasStsC¡æSåm
 =

223 
C⁄fig
->
HasStsC¡æSåm
;

224 
In°™˚På
->
RxBdRög
[
Index
].
HasDRE
 =

225 
C⁄fig
->
HasS2MmDRE
;

226 
In°™˚På
->
RxBdRög
[
Index
].
D©aWidth
 =

227 (()
C⁄fig
->
S2MmD©aWidth
 >> 3);

229 i‡(!
In°™˚På
->
Mi¸oDmaMode
) {

230 
In°™˚På
->
RxBdRög
[
Index
].
MaxTøns„rLí
 =

231 
MaxTøns„rLí
;

237 
In°™˚På
->
RxBdRög
[
Index
].
MaxTøns„rLí
 =

238 ((
C⁄fig
->
S2MmD©aWidth
 / 4) *

239 
C⁄fig
->
S2MmBur°Size
);

241 i‡(
In°™˚På
->
AddrWidth
 > 32)

242 
In°™˚På
->
RxBdRög
[
Index
].
Addr_ext
 = 1;

244 
In°™˚På
->
RxBdRög
[
Index
].
Addr_ext
 = 0;

250 
	`XAxiDma_Re£t
(
In°™˚På
);

254 
TimeOut
 = 
XAXIDMA_RESET_TIMEOUT
;

256 
TimeOut
) {

258 if(
	`XAxiDma_Re£tIsD⁄e
(
In°™˚På
)) {

262 
TimeOut
 -= 1;

266 i‡(!
TimeOut
) {

267 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "FailedÑeset in"

272 
In°™˚På
->
Inôülized
 = 0;

273  
XST_DMA_ERROR
;

278 
In°™˚På
->
Inôülized
 = 1;

280  
XST_SUCCESS
;

281 
	}
}

303 
	$XAxiDma_Re£t
(
XAxiDma
 * 
In°™˚På
)

305 
UINTPTR
 
RegBa£
;

306 
XAxiDma_BdRög
 *
TxRögPå
;

307 
XAxiDma_BdRög
 *
RxRögPå
;

308 
RögIndex
;

310 i‡(
In°™˚På
->
HasMm2S
) {

311 
TxRögPå
 = 
	`XAxiDma_GëTxRög
(
In°™˚På
);

316 if(
	`XAxiDma_HasSg
(
In°™˚På
)){

317 
	`XAxiDma_BdRögS«pShŸCuºBd
(
TxRögPå
);

319 
RögIndex
 = 0; RögIndex < 
In°™˚På
->
RxNumCh™√ls
;

320 
RögIndex
++) {

321 
RxRögPå
 = 
	`XAxiDma_GëRxIndexRög
(
In°™˚På
,

322 
RögIndex
);

323 
	`XAxiDma_BdRögS«pShŸCuºBd
(
RxRögPå
);

330 i‡(
In°™˚På
->
HasMm2S
) {

331 
RegBa£
 = 
In°™˚På
->RegBa£ + 
XAXIDMA_TX_OFFSET
;

334 
RegBa£
 = 
In°™˚På
->RegBa£ + 
XAXIDMA_RX_OFFSET
;

337 
	`XAxiDma_WrôeReg
(
RegBa£
, 
XAXIDMA_CR_OFFSET
, 
XAXIDMA_CR_RESET_MASK
);

340 i‡(
In°™˚På
->
HasMm2S
) {

341 
TxRögPå
 = 
	`XAxiDma_GëTxRög
(
In°™˚På
);

343 
TxRögPå
->
RunSèã
 = 
AXIDMA_CHANNEL_HALTED
;

346 i‡(
In°™˚På
->
HasS2Mm
) {

347 
RögIndex
 = 0; RögIndex < 
In°™˚På
->
RxNumCh™√ls
;

348 
RögIndex
++) {

349 
RxRögPå
 = 
	`XAxiDma_GëRxIndexRög
(
In°™˚På
, 
RögIndex
);

350 i‡(
In°™˚På
->
HasS2Mm
) {

351 
RxRögPå
->
RunSèã
 = 
AXIDMA_CHANNEL_HALTED
;

355 
	}
}

372 
	$XAxiDma_Re£tIsD⁄e
(
XAxiDma
 * 
In°™˚På
)

374 
u32
 
Regi°îVÆue
;

375 
XAxiDma_BdRög
 *
TxRögPå
;

376 
XAxiDma_BdRög
 *
RxRögPå
;

378 
TxRögPå
 = 
	`XAxiDma_GëTxRög
(
In°™˚På
);

379 
RxRögPå
 = 
	`XAxiDma_GëRxRög
(
In°™˚På
);

383 i‡(
In°™˚På
->
HasMm2S
) {

384 
Regi°îVÆue
 = 
	`XAxiDma_RódReg
(
TxRögPå
->
Ch™Ba£
,

385 
XAXIDMA_CR_OFFSET
);

389 if(
Regi°îVÆue
 & 
XAXIDMA_CR_RESET_MASK
) {

397 i‡(
In°™˚På
->
HasS2Mm
) {

398 
Regi°îVÆue
 = 
	`XAxiDma_RódReg
(
RxRögPå
->
Ch™Ba£
,

399 
XAXIDMA_CR_OFFSET
);

403 if(
Regi°îVÆue
 & 
XAXIDMA_CR_RESET_MASK
) {

410 
	}
}

428 
	$XAxiDma_Sèπ
(
XAxiDma
 * 
In°™˚På
)

430 
Sètus
;

432 i‡(!
In°™˚På
->
Inôülized
) {

434 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "Start: DriverÇot initialized "

435 "%d\r\n", 
In°™˚På
->
Inôülized
);

437  
XST_NOT_SGDMA
;

440 i‡(
In°™˚På
->
HasMm2S
) {

441 
XAxiDma_BdRög
 *
TxRögPå
;

442 
TxRögPå
 = 
	`XAxiDma_GëTxRög
(
In°™˚På
);

444 i‡(
TxRögPå
->
RunSèã
 =
AXIDMA_CHANNEL_HALTED
) {

448 if(
	`XAxiDma_HasSg
(
In°™˚På
)) {

449 
Sètus
 = 
	`XAxiDma_BdRögSèπ
(
TxRögPå
);

450 i‡(
Sètus
 !
XST_SUCCESS
) {

451 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

453 
Sètus
);

455  
XST_DMA_ERROR
;

459 
	`XAxiDma_WrôeReg
(
TxRögPå
->
Ch™Ba£
,

460 
XAXIDMA_CR_OFFSET
,

461 
	`XAxiDma_RódReg
(
TxRögPå
->
Ch™Ba£
,

462 
XAXIDMA_CR_OFFSET
)

463 | 
XAXIDMA_CR_RUNSTOP_MASK
);

465 
TxRögPå
->
RunSèã
 = 
AXIDMA_CHANNEL_NOT_HALTED
;

469 i‡(
In°™˚På
->
HasS2Mm
) {

470 
RögIndex
 = 0;

472 
RögIndex
 = 0; RögIndex < 
In°™˚På
->
RxNumCh™√ls
;

473 
RögIndex
++) {

474 
XAxiDma_BdRög
 *
RxRögPå
;

475 
RxRögPå
 = 
	`XAxiDma_GëRxIndexRög
(
In°™˚På
,

476 
RögIndex
);

478 i‡(
RxRögPå
->
RunSèã
 !
AXIDMA_CHANNEL_HALTED
) {

479  
XST_SUCCESS
;

484 if(
	`XAxiDma_HasSg
(
In°™˚På
)) {

485 
Sètus
 = 
	`XAxiDma_BdRögSèπ
(
RxRögPå
);

486 i‡(
Sètus
 !
XST_SUCCESS
) {

487 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

489 
Sètus
);

491  
XST_DMA_ERROR
;

495 
	`XAxiDma_WrôeReg
(
RxRögPå
->
Ch™Ba£
,

496 
XAXIDMA_CR_OFFSET
,

497 
	`XAxiDma_RódReg
(
RxRögPå
->
Ch™Ba£
,

498 
XAXIDMA_CR_OFFSET
) |

499 
XAXIDMA_CR_RUNSTOP_MASK
);

502 
RxRögPå
->
RunSèã
 = 
AXIDMA_CHANNEL_NOT_HALTED
;

506  
XST_SUCCESS
;

507 
	}
}

528 
	$XAxiDma_Pau£
(
XAxiDma
 * 
In°™˚På
)

531 i‡(!
In°™˚På
->
Inôülized
) {

533 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "Pause: DriverÇot initialized"

534 " %d\r\n",
In°™˚På
->
Inôülized
);

536  
XST_NOT_SGDMA
;

539 i‡(
In°™˚På
->
HasMm2S
) {

540 
XAxiDma_BdRög
 *
TxRögPå
;

541 
TxRögPå
 = 
	`XAxiDma_GëTxRög
(
In°™˚På
);

545 if(!
	`XAxiDma_HasSg
(
In°™˚På
)) {

546 
	`XAxiDma_WrôeReg
(
TxRögPå
->
Ch™Ba£
,

547 
XAXIDMA_CR_OFFSET
,

548 
	`XAxiDma_RódReg
(
TxRögPå
->
Ch™Ba£
,

549 
XAXIDMA_CR_OFFSET
)

550 & ~
XAXIDMA_CR_RUNSTOP_MASK
);

553 
TxRögPå
->
RunSèã
 = 
AXIDMA_CHANNEL_HALTED
;

556 i‡(
In°™˚På
->
HasS2Mm
) {

557 
RögIndex
 = 0;

558 
RögIndex
 = 0; RögIndex < 
In°™˚På
->
RxNumCh™√ls
;

559 
RögIndex
++) {

560 
XAxiDma_BdRög
 *
RxRögPå
;

561 
RxRögPå
 = 
	`XAxiDma_GëRxIndexRög
(
In°™˚På
, 
RögIndex
);

566 if(!
	`XAxiDma_HasSg
(
In°™˚På
Ë&& !
RögIndex
) {

567 
	`XAxiDma_WrôeReg
(
RxRögPå
->
Ch™Ba£
,

568 
XAXIDMA_CR_OFFSET
,

569 
	`XAxiDma_RódReg
(
RxRögPå
->
Ch™Ba£
,

570 
XAXIDMA_CR_OFFSET
)

571 & ~
XAXIDMA_CR_RUNSTOP_MASK
);

574 
RxRögPå
->
RunSèã
 = 
AXIDMA_CHANNEL_HALTED
;

578  
XST_SUCCESS
;

580 
	}
}

597 
	$XAxiDma_Resume
(
XAxiDma
 * 
In°™˚På
)

599 
Sètus
;

601 i‡(!
In°™˚På
->
Inôülized
) {

603 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "Resume: DriverÇot initialized"

604 " %d\r\n",
In°™˚På
->
Inôülized
);

606  
XST_NOT_SGDMA
;

611 i‡(!
	`XAxiDma_Sèπed
(
In°™˚På
)) {

612 
Sètus
 = 
	`XAxiDma_Sèπ
(
In°™˚På
);

614 i‡(
Sètus
 !
XST_SUCCESS
) {

615 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "Resume: failedÅo start"

616 "Éngöê%d\r\n", 
Sètus
);

618  
Sètus
;

624 i‡(
In°™˚På
->
HasMm2S
) {

625 
XAxiDma_BdRög
 *
TxRögPå
;

626 
TxRögPå
 = 
	`XAxiDma_GëTxRög
(
In°™˚På
);

628 if(
	`XAxiDma_HasSg
(
In°™˚På
)) {

629 
Sètus
 = 
	`XAxiDma_BdRögSèπ
(
TxRögPå
);

630 i‡(
Sètus
 !
XST_SUCCESS
) {

631 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "Resume: failed"

632 "Åÿ°¨àtxÑög %d\r\n", 
Sètus
);

634  
XST_DMA_ERROR
;

638 
TxRögPå
->
RunSèã
 = 
AXIDMA_CHANNEL_NOT_HALTED
;

641 i‡(
In°™˚På
->
HasS2Mm
) {

642 
RögIndex
 = 0;

643 
RögIndex
 = 0 ; RögIndex < 
In°™˚På
->
RxNumCh™√ls
;

644 
RögIndex
++) {

645 
XAxiDma_BdRög
 *
RxRögPå
;

646 
RxRögPå
 = 
	`XAxiDma_GëRxIndexRög
(
In°™˚På
, 
RögIndex
);

648 if(
	`XAxiDma_HasSg
(
In°™˚På
)) {

649 
Sètus
 = 
	`XAxiDma_BdRögSèπ
(
RxRögPå
);

650 i‡(
Sètus
 !
XST_SUCCESS
) {

651 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "Resume: failed"

652 "tÿ°¨àrxÑög %d\r\n", 
Sètus
);

654  
XST_DMA_ERROR
;

658 
RxRögPå
->
RunSèã
 = 
AXIDMA_CHANNEL_NOT_HALTED
;

662  
XST_SUCCESS
;

663 
	}
}

679 
	$XAxiDma_Sèπed
(
XAxiDma
 * 
In°™˚På
)

682 i‡(!
In°™˚På
->
Inôülized
) {

684 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "Started: DriverÇot initialized"

685 " %d\r\n",
In°™˚På
->
Inôülized
);

690 i‡(
In°™˚På
->
HasMm2S
) {

691 
XAxiDma_BdRög
 *
TxRögPå
;

692 
TxRögPå
 = 
	`XAxiDma_GëTxRög
(
In°™˚På
);

694 i‡(!
	`XAxiDma_BdRögHwIsSèπed
(
TxRögPå
)) {

695 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

702 i‡(
In°™˚På
->
HasS2Mm
) {

703 
XAxiDma_BdRög
 *
RxRögPå
;

704 
RxRögPå
 = 
	`XAxiDma_GëRxRög
(
In°™˚På
);

706 i‡(!
	`XAxiDma_BdRögHwIsSèπed
(
RxRögPå
)) {

707 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

715 
	}
}

733 
u32
 
	$XAxiDma_Busy
(
XAxiDma
 *
In°™˚På
, 
Dúe˘i⁄
)

736  ((
	`XAxiDma_RódReg
(
In°™˚På
->
RegBa£
 +

737 (
XAXIDMA_RX_OFFSET
 * 
Dúe˘i⁄
),

738 
XAXIDMA_SR_OFFSET
) &

739 
XAXIDMA_IDLE_MASK
Ë? 
FALSE
 : 
TRUE
);

740 
	}
}

759 
	$XAxiDma_Sñe˘KeyHﬁe
(
XAxiDma
 *
In°™˚På
, 
Dúe˘i⁄
, 
Sñe˘
)

761 
u32
 
VÆue
;

763 
VÆue
 = 
	`XAxiDma_RódReg
(
In°™˚På
->
RegBa£
 +

764 (
XAXIDMA_RX_OFFSET
 * 
Dúe˘i⁄
),

765 
XAXIDMA_CR_OFFSET
);

767 i‡(
Sñe˘
)

768 
VÆue
 |
XAXIDMA_CR_KEYHOLE_MASK
;

770 
VÆue
 &~
XAXIDMA_CR_KEYHOLE_MASK
;

772 
	`XAxiDma_WrôeReg
(
In°™˚På
->
RegBa£
 +

773 (
XAXIDMA_RX_OFFSET
 * 
Dúe˘i⁄
),

774 
XAXIDMA_CR_OFFSET
, 
VÆue
);

776  
XST_SUCCESS
;

778 
	}
}

796 
	$XAxiDma_Sñe˘Cy˛icMode
(
XAxiDma
 *
In°™˚På
, 
Dúe˘i⁄
, 
Sñe˘
)

798 
u32
 
VÆue
;

800 
VÆue
 = 
	`XAxiDma_RódReg
(
In°™˚På
->
RegBa£
 +

801 (
XAXIDMA_RX_OFFSET
 * 
Dúe˘i⁄
),

802 
XAXIDMA_CR_OFFSET
);

804 i‡(
Sñe˘
)

805 
VÆue
 |
XAXIDMA_CR_CYCLIC_MASK
;

807 
VÆue
 &~
XAXIDMA_CR_CYCLIC_MASK
;

809 
	`XAxiDma_WrôeReg
(
In°™˚På
->
RegBa£
 +

810 (
XAXIDMA_RX_OFFSET
 * 
Dúe˘i⁄
),

811 
XAXIDMA_CR_OFFSET
, 
VÆue
);

813  
XST_SUCCESS
;

814 
	}
}

842 
u32
 
	$XAxiDma_Sim∂eTøns„r
(
XAxiDma
 *
In°™˚På
, 
UINTPTR
 
BuffAddr
, 
u32
 
Lígth
,

843 
Dúe˘i⁄
)

845 
u32
 
W‹dBôs
;

846 
RögIndex
 = 0;

850 i‡(
	`XAxiDma_HasSg
(
In°™˚På
)) {

851 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "Simple DMA mode isÇot"

854  
XST_FAILURE
;

857 if(
Dúe˘i⁄
 =
XAXIDMA_DMA_TO_DEVICE
){

858 i‡((
Lígth
 < 1) ||

859 (
Lígth
 > 
In°™˚På
->
TxBdRög
.
MaxTøns„rLí
)) {

860  
XST_INVALID_PARAM
;

863 i‡(!
In°™˚På
->
HasMm2S
) {

864 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "MM2S channel isÇot"

867  
XST_FAILURE
;

873 if(!(
	`XAxiDma_RódReg
(
In°™˚På
->
TxBdRög
.
Ch™Ba£
,

874 
XAXIDMA_SR_OFFSET
Ë& 
XAXIDMA_HALTED_MASK
)) {

875 i‡(
	`XAxiDma_Busy
(
In°™˚På
,
Dúe˘i⁄
)) {

876 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

878  
XST_FAILURE
;

882 i‡(!
In°™˚På
->
Mi¸oDmaMode
) {

883 
W‹dBôs
 = (
u32
)((
In°™˚På
->
TxBdRög
.
D©aWidth
) - 1);

886 
W‹dBôs
 = 
XAXIDMA_MICROMODE_MIN_BUF_ALIGN
;

889 i‡((
BuffAddr
 & 
W‹dBôs
)) {

891 i‡(!
In°™˚På
->
TxBdRög
.
HasDRE
) {

892 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

894 " DRE %x\r\n",()
BuffAddr
);

896  
XST_INVALID_PARAM
;

901 
	`XAxiDma_WrôeReg
(
In°™˚På
->
TxBdRög
.
Ch™Ba£
,

902 
XAXIDMA_SRCADDR_OFFSET
, 
	`LOWER_32_BITS
(
BuffAddr
));

903 i‡(
In°™˚På
->
AddrWidth
 > 32)

904 
	`XAxiDma_WrôeReg
(
In°™˚På
->
TxBdRög
.
Ch™Ba£
,

905 
XAXIDMA_SRCADDR_MSB_OFFSET
,

906 
	`UPPER_32_BITS
(
BuffAddr
));

908 
	`XAxiDma_WrôeReg
(
In°™˚På
->
TxBdRög
.
Ch™Ba£
,

909 
XAXIDMA_CR_OFFSET
,

910 
	`XAxiDma_RódReg
(

911 
In°™˚På
->
TxBdRög
.
Ch™Ba£
,

912 
XAXIDMA_CR_OFFSET
)| 
XAXIDMA_CR_RUNSTOP_MASK
);

916 
	`XAxiDma_WrôeReg
(
In°™˚På
->
TxBdRög
.
Ch™Ba£
,

917 
XAXIDMA_BUFFLEN_OFFSET
, 
Lígth
);

919 if(
Dúe˘i⁄
 =
XAXIDMA_DEVICE_TO_DMA
){

920 i‡((
Lígth
 < 1) ||

921 (
Lígth
 >

922 
In°™˚På
->
RxBdRög
[
RögIndex
].
MaxTøns„rLí
)) {

923  
XST_INVALID_PARAM
;

927 i‡(!
In°™˚På
->
HasS2Mm
) {

928 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "S2MM channel isÇot"

931  
XST_FAILURE
;

934 if(!(
	`XAxiDma_RódReg
(
In°™˚På
->
RxBdRög
[
RögIndex
].
Ch™Ba£
,

935 
XAXIDMA_SR_OFFSET
Ë& 
XAXIDMA_HALTED_MASK
)) {

936 i‡(
	`XAxiDma_Busy
(
In°™˚På
,
Dúe˘i⁄
)) {

937 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

939  
XST_FAILURE
;

943 i‡(!
In°™˚På
->
Mi¸oDmaMode
) {

944 
W‹dBôs
 =

945 (
u32
)((
In°™˚På
->
RxBdRög
[
RögIndex
].
D©aWidth
) - 1);

948 
W‹dBôs
 = 
XAXIDMA_MICROMODE_MIN_BUF_ALIGN
;

951 i‡((
BuffAddr
 & 
W‹dBôs
)) {

953 i‡(!
In°™˚På
->
RxBdRög
[
RögIndex
].
HasDRE
) {

954 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

956 " DRE %x\r\n", ()
BuffAddr
);

958  
XST_INVALID_PARAM
;

963 
	`XAxiDma_WrôeReg
(
In°™˚På
->
RxBdRög
[
RögIndex
].
Ch™Ba£
,

964 
XAXIDMA_DESTADDR_OFFSET
, 
	`LOWER_32_BITS
(
BuffAddr
));

965 i‡(
In°™˚På
->
AddrWidth
 > 32)

966 
	`XAxiDma_WrôeReg
(
In°™˚På
->
RxBdRög
[
RögIndex
].
Ch™Ba£
,

967 
XAXIDMA_DESTADDR_MSB_OFFSET
,

968 
	`UPPER_32_BITS
(
BuffAddr
));

970 
	`XAxiDma_WrôeReg
(
In°™˚På
->
RxBdRög
[
RögIndex
].
Ch™Ba£
,

971 
XAXIDMA_CR_OFFSET
,

972 
	`XAxiDma_RódReg
(
In°™˚På
->
RxBdRög
[
RögIndex
].
Ch™Ba£
,

973 
XAXIDMA_CR_OFFSET
)| 
XAXIDMA_CR_RUNSTOP_MASK
);

976 
	`XAxiDma_WrôeReg
(
In°™˚På
->
RxBdRög
[
RögIndex
].
Ch™Ba£
,

977 
XAXIDMA_BUFFLEN_OFFSET
, 
Lígth
);

981  
XST_SUCCESS
;

982 
	}
}

	@xaxidma.h

478 #i‚de‡
XAXIDMA_H_


479 
	#XAXIDMA_H_


	)

481 #ifde‡
__˝lu•lus


486 
	~"xaxidma_bdrög.h
"

487 #ifde‡
__MICROBLAZE__


488 
	~"xív.h
"

490 
	~<°rög.h
>

491 
	~"xû_ˇche.h
"

503 
	sXAxiDma
 {

504 
UINTPTR
 
RegBa£
;

506 
HasMm2S
;

507 
HasS2Mm
;

508 
Inôülized
;

509 
HasSg
;

511 
XAxiDma_BdRög
 
TxBdRög
;

512 
XAxiDma_BdRög
 
RxBdRög
[16];

513 
TxNumCh™√ls
;

514 
RxNumCh™√ls
;

515 
Mi¸oDmaMode
;

516 
AddrWidth
;

517 } 
	tXAxiDma
;

525 
u32
 
Devi˚Id
;

526 
UINTPTR
 
Ba£Addr
;

528 
HasStsC¡æSåm
;

529 
HasMm2S
;

530 
HasMm2SDRE
;

531 
Mm2SD©aWidth
;

532 
HasS2Mm
;

533 
HasS2MmDRE
;

534 
S2MmD©aWidth
;

535 
HasSg
;

536 
Mm2sNumCh™√ls
;

537 
S2MmNumCh™√ls
;

538 
Mm2SBur°Size
;

539 
S2MmBur°Size
;

540 
Mi¸oDmaMode
;

541 
AddrWidth
;

542 
SgLígthWidth
;

543 } 
	tXAxiDma_C⁄fig
;

564 
	#XAxiDma_GëTxRög
(
In°™˚På
) \

565 (&((
In°™˚På
)->
TxBdRög
))

	)

585 
	#XAxiDma_GëRxRög
(
In°™˚På
) \

586 (&((
In°™˚På
)->
RxBdRög
[0]))

	)

608 
	#XAxiDma_GëRxIndexRög
(
In°™˚På
, 
RögIndex
) \

609 (&((
In°™˚På
)->
RxBdRög
[
RögIndex
]))

	)

626 
	#XAxiDma_HasSg
(
In°™˚På
Ë((In°™˚På)->
HasSg
Ë? 
TRUE
 : 
FALSE


	)

643 
	#XAxiDma_I¡rE«bÀ
(
In°™˚På
, 
Mask
, 
Dúe˘i⁄
) \

644 
	`XAxiDma_WrôeReg
((
In°™˚På
)->
RegBa£
 + \

645 (
XAXIDMA_RX_OFFSET
 * 
Dúe˘i⁄
), 
XAXIDMA_CR_OFFSET
, \

646 (
	`XAxiDma_RódReg
((
In°™˚På
)->
RegBa£
 + \

647 (
XAXIDMA_RX_OFFSET
 * 
Dúe˘i⁄
), 
XAXIDMA_CR_OFFSET
)) \

648 | (
Mask
 & 
XAXIDMA_IRQ_ALL_MASK
))

	)

665 
	#XAxiDma_I¡rGëE«bÀd
(
In°™˚På
, 
Dúe˘i⁄
) \

666 
	`XAxiDma_RódReg
((
In°™˚På
)->
RegBa£
 + \

667 (
XAXIDMA_RX_OFFSET
 * 
Dúe˘i⁄
), 
XAXIDMA_CR_OFFSET
) &\

668 
XAXIDMA_IRQ_ALL_MASK
)

	)

687 
	#XAxiDma_I¡rDißbÀ
(
In°™˚På
, 
Mask
, 
Dúe˘i⁄
) \

688 
	`XAxiDma_WrôeReg
((
In°™˚På
)->
RegBa£
 + \

689 (
XAXIDMA_RX_OFFSET
 * 
Dúe˘i⁄
), 
XAXIDMA_CR_OFFSET
, \

690 (
	`XAxiDma_RódReg
((
In°™˚På
)->
RegBa£
 + \

691 (
XAXIDMA_RX_OFFSET
 * 
Dúe˘i⁄
), 
XAXIDMA_CR_OFFSET
)) \

692 & ~(
Mask
 & 
XAXIDMA_IRQ_ALL_MASK
))

	)

709 
	#XAxiDma_I¡rGëIrq
(
In°™˚På
, 
Dúe˘i⁄
) \

710 (
	`XAxiDma_RódReg
((
In°™˚På
)->
RegBa£
 + \

711 (
XAXIDMA_RX_OFFSET
 * 
Dúe˘i⁄
), 
XAXIDMA_SR_OFFSET
) &\

712 
XAXIDMA_IRQ_ALL_MASK
)

	)

729 
	#XAxiDma_I¡rAckIrq
(
In°™˚På
, 
Mask
, 
Dúe˘i⁄
) \

730 
	`XAxiDma_WrôeReg
((
In°™˚På
)->
RegBa£
 + \

731 (
XAXIDMA_RX_OFFSET
 * 
Dúe˘i⁄
), 
XAXIDMA_SR_OFFSET
, \

732 (
Mask
Ë& 
XAXIDMA_IRQ_ALL_MASK
)

	)

741 
XAxiDma_C⁄fig
 *
XAxiDma_LookupC⁄fig
(
u32
 
Devi˚Id
);

742 
XAxiDma_C⁄fig
 *
XAxiDma_LookupC⁄figBa£Addr
(
UINTPTR
 
Ba£addr
);

743 
XAxiDma_CfgInôülize
(
XAxiDma
 * 
In°™˚På
, 
XAxiDma_C⁄fig
 *
C⁄fig
);

744 
XAxiDma_Re£t
(
XAxiDma
 * 
In°™˚På
);

745 
XAxiDma_Re£tIsD⁄e
(
XAxiDma
 * 
In°™˚På
);

746 
XAxiDma_Pau£
(
XAxiDma
 * 
In°™˚På
);

747 
XAxiDma_Resume
(
XAxiDma
 * 
In°™˚På
);

748 
u32
 
XAxiDma_Busy
(
XAxiDma
 *
In°™˚På
,
Dúe˘i⁄
);

749 
u32
 
XAxiDma_Sim∂eTøns„r
(
XAxiDma
 *
In°™˚På
, 
UINTPTR
 
BuffAddr
, u32 
Lígth
,

750 
Dúe˘i⁄
);

751 
XAxiDma_Sñe˘KeyHﬁe
(
XAxiDma
 *
In°™˚På
, 
Dúe˘i⁄
, 
Sñe˘
);

752 
XAxiDma_Sñe˘Cy˛icMode
(
XAxiDma
 *
In°™˚På
, 
Dúe˘i⁄
, 
Sñe˘
);

753 
XAxiDma_Sñ·e°
(
XAxiDma
 * 
In°™˚På
);

754 #ifde‡
__˝lu•lus


	@xaxidma_bd.c

59 
	~<°dio.h
>

60 
	~"xaxidma_bd.h
"

92 
	$XAxiDma_BdSëLígth
(
XAxiDma_Bd
 *
BdPå
, 
uöt32_t
 
LíByãs
, uöt32_à
LígthMask
)

94 i‡(
LíByãs
 <0 || (LíByã†> 
LígthMask
)) {

96 
	`¥ötf
(
XDBG_DEBUG_ERROR
, "invalidÜength %d\n",

97 ()
LíByãs
);

99  
XST_INVALID_PARAM
;

102 
	`XAxiDma_BdWrôe
((
BdPå
), 
XAXIDMA_BD_CTRL_LEN_OFFSET
,

103 ((
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_CTRL_LEN_OFFSET
) & \

104 ~
LígthMask
)Ë| 
LíByãs
);

106  
XST_SUCCESS
;

107 
	}
}

123 
uöt32_t
 
	$XAxiDma_BdSëBufAddr
(
XAxiDma_Bd
* 
BdPå
, 
UINTPTR
 
Addr
)

125 
uöt32_t
 
HasDRE
;

126 
u8
 
W‹dLí
;

128 
HasDRE
 = 
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_HAS_DRE_OFFSET
);

129 
W‹dLí
 = 
HasDRE
 & 
XAXIDMA_BD_WORDLEN_MASK
;

131 i‡(
Addr
 & (
W‹dLí
 - 1)) {

132 i‡((
HasDRE
 & 
XAXIDMA_BD_HAS_DRE_MASK
) == 0) {

133 
	`xû_¥ötf
("Error set bufáddr %x with %xánd %x,"

134 " %x\r\n",
Addr
, 
HasDRE
, (
W‹dLí
 - 1),

135 
Addr
 & (
W‹dLí
 - 1));

137  
XST_INVALID_PARAM
;

141 #i‡
	`deföed
(
__Ørch64__
Ë|| deföed(
__¨ch64__
)

142 
	`XAxiDma_BdWrôe64
(
BdPå
, 
XAXIDMA_BD_BUFA_OFFSET
, 
Addr
);

144 
	`XAxiDma_BdWrôe
(
BdPå
, 
XAXIDMA_BD_BUFA_OFFSET
, 
Addr
);

147  
XST_SUCCESS
;

148 
	}
}

166 
uöt32_t
 
	$XAxiDma_BdSëBufAddrMi¸oMode
(
XAxiDma_Bd
* 
BdPå
, 
UINTPTR
 
Addr
)

168 i‡(
Addr
 & 
XAXIDMA_MICROMODE_MIN_BUF_ALIGN
) {

169 
	`xû_¥ötf
("Error set bufáddr %xánd %x,"

170 " %x\r\n", 
Addr
, 
XAXIDMA_MICROMODE_MIN_BUF_ALIGN
,

171 
Addr
 & 
XAXIDMA_MICROMODE_MIN_BUF_ALIGN
);

173  
XST_INVALID_PARAM
;

176 #i‡
	`deföed
(
__Ørch64__
Ë|| deföed(
__¨ch64__
)

177 
	`XAxiDma_BdWrôe64
(
BdPå
, 
XAXIDMA_BD_BUFA_OFFSET
, 
Addr
);

179 
	`XAxiDma_BdWrôe
(
BdPå
, 
XAXIDMA_BD_BUFA_OFFSET
, 
Addr
);

182  
XST_SUCCESS
;

183 
	}
}

208 
	$XAxiDma_BdSëAµW‹d
(
XAxiDma_Bd
* 
BdPå
, 
Off£t
, 
uöt32_t
 
W‹d
)

210 i‡(
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_HAS_STSCNTRL_OFFSET
) == 0) {

212 
	`¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingSetAppWord:Ço sts cntrl"

215  
XST_INVALID_PARAM
;

218 i‡((
Off£t
 < 0Ë|| (Off£à> 
XAXIDMA_LAST_APPWORD
)) {

220 
	`¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingSetAppWord: invalid"

221 "off£à%d",
Off£t
);

223  
XST_INVALID_PARAM
;

226 
	`XAxiDma_BdWrôe
(
BdPå
, 
XAXIDMA_BD_USR0_OFFSET
 + 
Off£t
 * 4, 
W‹d
);

228  
XST_SUCCESS
;

229 
	}
}

246 
uöt32_t
 
	$XAxiDma_BdGëAµW‹d
(
XAxiDma_Bd
* 
BdPå
, 
Off£t
, *
VÆid
)

248 *
VÆid
 = 0;

250 i‡(
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_HAS_STSCNTRL_OFFSET
) == 0) {

252 
	`¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingGetAppWord:Ço sts cntrl "

255  (
uöt32_t
)0;

258 if((
Off£t
 < 0Ë|| (Off£à> 
XAXIDMA_LAST_APPWORD
)) {

260 
	`¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingGetAppWord: invalid"

261 " off£à%d", 
Off£t
);

263  (
uöt32_t
)0;

266 *
VÆid
 = 1;

268  
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_USR0_OFFSET
 + 
Off£t
 * 4);

269 
	}
}

283 
	$XAxiDma_BdSëCål
(
XAxiDma_Bd
* 
BdPå
, 
uöt32_t
 
D©a
)

285 
uöt32_t
 
RegVÆue
 = 
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_CTRL_LEN_OFFSET
);

287 
RegVÆue
 &~
XAXIDMA_BD_CTRL_ALL_MASK
;

289 
RegVÆue
 |(
D©a
 & 
XAXIDMA_BD_CTRL_ALL_MASK
);

291 
	`XAxiDma_BdWrôe
((
BdPå
), 
XAXIDMA_BD_CTRL_LEN_OFFSET
, 
RegVÆue
);

294 
	}
}

306 
	$XAxiDma_DumpBd
(
XAxiDma_Bd
* 
BdPå
)

309 
	`xû_¥ötf
("Dum∞BD %x:\r\n", (
UINTPTR
)
BdPå
);

310 
	`xû_¥ötf
("\tNext Bd Ptr: %x\r\n",

311 ()
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_NDESC_OFFSET
));

312 
	`xû_¥ötf
("\tBuffáddr: %x\r\n",

313 ()
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_BUFA_OFFSET
));

314 
	`xû_¥ötf
("\tMCDMA Fields: %x\r\n",

315 ()
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_MCCTL_OFFSET
));

316 
	`xû_¥ötf
("\tVSIZE_STRIDE: %x\r\n",

317 ()
	`XAxiDma_BdRód
(
BdPå
,

318 
XAXIDMA_BD_STRIDE_VSIZE_OFFSET
));

319 
	`xû_¥ötf
("\tContrlÜen: %x\r\n",

320 ()
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_CTRL_LEN_OFFSET
));

321 
	`xû_¥ötf
("\tStatus: %x\r\n",

322 ()
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_STS_OFFSET
));

324 
	`xû_¥ötf
("\tAPP 0: %x\r\n",

325 ()
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_USR0_OFFSET
));

326 
	`xû_¥ötf
("\tAPP 1: %x\r\n",

327 ()
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_USR1_OFFSET
));

328 
	`xû_¥ötf
("\tAPP 2: %x\r\n",

329 ()
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_USR2_OFFSET
));

330 
	`xû_¥ötf
("\tAPP 3: %x\r\n",

331 ()
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_USR3_OFFSET
));

332 
	`xû_¥ötf
("\tAPP 4: %x\r\n",

333 ()
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_USR4_OFFSET
));

335 
	`xû_¥ötf
("\tSW ID: %x\r\n",

336 ()
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_ID_OFFSET
));

337 
	`xû_¥ötf
("\tStsCtrl: %x\r\n",

338 ()
	`XAxiDma_BdRód
(
BdPå
,

339 
XAXIDMA_BD_HAS_STSCNTRL_OFFSET
));

340 
	`xû_¥ötf
("\tDRE: %x\r\n",

341 ()
	`XAxiDma_BdRód
(
BdPå
, 
XAXIDMA_BD_HAS_DRE_OFFSET
));

343 
	`xû_¥ötf
("\r\n");

344 
	}
}

	@xaxidma_bd.h

103 #i‚de‡
XAXIDMA_BD_H_


104 
	#XAXIDMA_BD_H_


	)

106 #ifde‡
__˝lu•lus


112 
	~<°döt.h
>

113 
	~<°rög.h
>

123 
uöt32_t
 
	tXAxiDma_Bd
[
XAXIDMA_BD_NUM_WORDS
];

132 
	#__Ørch64__


133 #ifde‡
__Ørch64__


	)

134 
	#XAXIDMA_CACHE_FLUSH
(
BdPå
)

	)

135 
	#XAXIDMA_CACHE_INVALIDATE
(
BdPå
)

	)

137 
	#XAXIDMA_CACHE_FLUSH
(
BdPå
) \

138 
	`Xû_DCacheFlushR™ge
((*)(
BdPå
), 
XAXIDMA_BD_HW_NUM_BYTES
)

	)

140 
	#XAXIDMA_CACHE_INVALIDATE
(
BdPå
) \

141 
	`Xû_DCacheInvÆid©eR™ge
((*)(
BdPå
), 
XAXIDMA_BD_HW_NUM_BYTES
)

	)

159 
	#XAxiDma_BdRód
(
Ba£Addªss
, 
Off£t
) \

160 (*(
uöt32_t
 *)((*)(
Ba£Addªss
Ë+ (uöt32_t)(
Off£t
)))

	)

178 
	#XAxiDma_BdWrôe
(
Ba£Addªss
, 
Off£t
, 
D©a
) \

179 (*(
uöt32_t
 *)((*)(*)(
Ba£Addªss
Ë+ (uöt32_t)(
Off£t
))Ë(uöt32_t)(
D©a
)

	)

197 
	#XAxiDma_BdWrôe64
(
Ba£Addªss
, 
Off£t
, 
D©a
) \

198 (*(*)((*)(*)(
Ba£Addªss
Ë+ (
uöt32_t
)(
Off£t
))Ë()(
D©a
)

	)

214 
	#XAxiDma_BdCÀ¨
(
BdPå
) \

215 
	`mem£t
((*)(((*)(
BdPå
)Ë+ 
XAXIDMA_BD_START_CLEAR
), 0, \

216 
XAXIDMA_BD_BYTES_TO_CLEAR
)

	)

231 
	#XAxiDma_BdGëCål
(
BdPå
) \

232 (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_CTRL_LEN_OFFSET
) \

233 & 
XAXIDMA_BD_CTRL_ALL_MASK
)

	)

248 
	#XAxiDma_BdGëSts
(
BdPå
) \

249 (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_STS_OFFSET
) & \

250 
XAXIDMA_BD_STS_ALL_MASK
)

	)

269 
	#XAxiDma_BdGëLígth
(
BdPå
, 
LígthMask
) \

270 (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_CTRL_LEN_OFFSET
) & \

271 
LígthMask
)

	)

289 
	#XAxiDma_BdSëId
(
BdPå
, 
Id
) \

290 (
	`XAxiDma_BdWrôe
((
BdPå
), 
XAXIDMA_BD_ID_OFFSET
, (*)(
Id
)))

	)

306 
	#XAxiDma_BdGëId
(
BdPå
Ë(
	`XAxiDma_BdRód
((BdPå), 
XAXIDMA_BD_ID_OFFSET
))

	)

321 
	#XAxiDma_BdGëBufAddr
(
BdPå
) \

322 (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_BUFA_OFFSET
))

	)

344 
	#XAxiDma_BdHwCom∂ëed
(
BdPå
) \

345 (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_STS_OFFSET
) & \

346 
XAXIDMA_BD_STS_COMPLETE_MASK
)

	)

364 
	#XAxiDma_BdGëA˘uÆLígth
(
BdPå
, 
LígthMask
) \

365 (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_STS_OFFSET
) & \

366 
LígthMask
)

	)

385 
	#XAxiDma_BdSëTId
(
BdPå
, 
TId
) \

387 
uöt32_t
 
vÆ
; \

388 
vÆ
 = (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_MCCTL_OFFSET
) & \

389 ~
XAXIDMA_BD_TID_FIELD_MASK
); \

390 
vÆ
 |((
uöt32_t
)(
TId
Ë<< 
XAXIDMA_BD_TID_FIELD_SHIFT
); \

391 
	`XAxiDma_BdWrôe
((
BdPå
), 
XAXIDMA_BD_MCCTL_OFFSET
, 
vÆ
); \

392 }

	)

407 
	#XAxiDma_BdGëTId
(
BdPå
) \

408 ((
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_STS_OFFSET
)) & \

409 
XAXIDMA_BD_TID_FIELD_MASK
)

	)

426 
	#XAxiDma_BdSëTDe°
(
BdPå
, 
TDe°
) \

428 
uöt32_t
 
vÆ
; \

429 
vÆ
 = (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_MCCTL_OFFSET
) & \

430 ~
XAXIDMA_BD_TDEST_FIELD_MASK
); \

431 
vÆ
 |((
uöt32_t
)(
TDe°
Ë<< 
XAXIDMA_BD_TDEST_FIELD_SHIFT
); \

432 
	`XAxiDma_BdWrôe
((
BdPå
), 
XAXIDMA_BD_MCCTL_OFFSET
, 
vÆ
); \

433 }

	)

449 
	#XAxiDma_BdGëTDe°
(
BdPå
) \

450 ((
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_STS_OFFSET
)) & \

451 
XAXIDMA_BD_TDEST_FIELD_MASK
)

	)

468 
	#XAxiDma_BdSëTU£r
(
BdPå
, 
TU£r
) \

470 
uöt32_t
 
vÆ
; \

471 
vÆ
 = (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_MCCTL_OFFSET
) & \

472 ~
XAXIDMA_BD_TUSER_FIELD_MASK
); \

473 
vÆ
 |((
uöt32_t
)(
TU£r
Ë<< 
XAXIDMA_BD_TUSER_FIELD_SHIFT
); \

474 
	`XAxiDma_BdWrôe
((
BdPå
), 
XAXIDMA_BD_MCCTL_OFFSET
, 
vÆ
); \

475 }

	)

491 
	#XAxiDma_BdGëTU£r
(
BdPå
) \

492 ((
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_STS_OFFSET
)) & \

493 
XAXIDMA_BD_TUSER_FIELD_MASK
)

	)

511 
	#XAxiDma_BdSëARCache
(
BdPå
, 
ARCache
) \

513 
uöt32_t
 
vÆ
; \

514 
vÆ
 = (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_MCCTL_OFFSET
) & \

515 ~
XAXIDMA_BD_ARCACHE_FIELD_MASK
); \

516 
vÆ
 |((
uöt32_t
)(
ARCache
Ë<< 
XAXIDMA_BD_ARCACHE_FIELD_SHIFT
); \

517 
	`XAxiDma_BdWrôe
((
BdPå
), 
XAXIDMA_BD_MCCTL_OFFSET
, 
vÆ
); \

518 }

	)

534 
	#XAxiDma_BdGëARCache
(
BdPå
) \

535 ((
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_MCCTL_OFFSET
)) & \

536 
XAXIDMA_BD_ARCACHE_FIELD_MASK
)

	)

554 
	#XAxiDma_BdSëARU£r
(
BdPå
, 
ARU£r
) \

556 
uöt32_t
 
vÆ
; \

557 
vÆ
 = (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_MCCTL_OFFSET
) & \

558 ~
XAXIDMA_BD_ARUSER_FIELD_MASK
); \

559 
vÆ
 |((
uöt32_t
)(
ARU£r
Ë<< 
XAXIDMA_BD_ARUSER_FIELD_SHIFT
); \

560 
	`XAxiDma_BdWrôe
((
BdPå
), 
XAXIDMA_BD_MCCTL_OFFSET
, 
vÆ
); \

561 }

	)

578 
	#XAxiDma_BdGëARU£r
(
BdPå
) \

579 ((
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_MCCTL_OFFSET
)) & \

580 
XAXIDMA_BD_ARUSER_FIELD_MASK
)

	)

598 
	#XAxiDma_BdSëSåide
(
BdPå
, 
Såide
) \

600 
uöt32_t
 
vÆ
; \

601 
vÆ
 = (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_STRIDE_VSIZE_OFFSET
) & \

602 ~
XAXIDMA_BD_STRIDE_FIELD_MASK
); \

603 
vÆ
 |((
uöt32_t
)(
Såide
Ë<< 
XAXIDMA_BD_STRIDE_FIELD_SHIFT
); \

604 
	`XAxiDma_BdWrôe
((
BdPå
), 
XAXIDMA_BD_STRIDE_VSIZE_OFFSET
, 
vÆ
); \

605 }

	)

621 
	#XAxiDma_BdGëSåide
(
BdPå
) \

622 ((
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_STRIDE_VSIZE_OFFSET
)) & \

623 
XAXIDMA_BD_STRIDE_FIELD_MASK
)

	)

640 
	#XAxiDma_BdSëVSize
(
BdPå
, 
VSize
) \

642 
uöt32_t
 
vÆ
; \

643 
vÆ
 = (
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_STRIDE_VSIZE_OFFSET
) & \

644 ~
XAXIDMA_BD_VSIZE_FIELD_MASK
); \

645 
vÆ
 |((
uöt32_t
)(
VSize
Ë<< 
XAXIDMA_BD_VSIZE_FIELD_SHIFT
); \

646 
	`XAxiDma_BdWrôe
((
BdPå
), 
XAXIDMA_BD_STRIDE_VSIZE_OFFSET
, 
vÆ
); \

647 }

	)

663 
	#XAxiDma_BdGëVSize
(
BdPå
) \

664 ((
	`XAxiDma_BdRód
((
BdPå
), 
XAXIDMA_BD_STRIDE_VSIZE_OFFSET
)) & \

665 
XAXIDMA_BD_VSIZE_FIELD_MASK
)

	)

671 
XAxiDma_BdSëLígth
(
XAxiDma_Bd
* 
BdPå
, 
uöt32_t
 
LíByãs
, uöt32_à
LígthMask
);

672 
uöt32_t
 
XAxiDma_BdSëBufAddr
(
XAxiDma_Bd
* 
BdPå
, *
Addr
);

673 
uöt32_t
 
XAxiDma_BdSëBufAddrMi¸oMode
(
XAxiDma_Bd
* 
BdPå
, *
Addr
);

674 
XAxiDma_BdSëAµW‹d
(
XAxiDma_Bd
 * 
BdPå
, 
Off£t
, 
uöt32_t
 
W‹d
);

675 
uöt32_t
 
XAxiDma_BdGëAµW‹d
(
XAxiDma_Bd
 * 
BdPå
, 
Off£t
, *
VÆid
);

676 
XAxiDma_BdSëCål
(
XAxiDma_Bd
 *
BdPå
, 
uöt32_t
 
D©a
);

680 
XAxiDma_DumpBd
(
XAxiDma_Bd
* 
BdPå
);

682 #ifde‡
__˝lu•lus


	@xaxidma_bdring.c

73 
	~"xaxidma_bdrög.h
"

80 
	#XAXIDMA_STOP_TIMEOUT
 500000

	)

100 
	#XAXIDMA_VIRT_TO_PHYS
(
BdPå
) \

101 ((
UINTPTR
)(
BdPå
Ë+ (
RögPå
->
Fú°BdPhysAddr
 - RögPå->
Fú°BdAddr
))

	)

121 
	#XAXIDMA_RING_SEEKAHEAD
(
RögPå
, 
BdPå
, 
NumBd
) \

123 
UINTPTR
 
Addr
 = (UINTPTR)(*)(
BdPå
); \

125 
Addr
 +((
RögPå
)->
Sï¨©i⁄
 * (
NumBd
)); \

126 i‡((
Addr
 > (
RögPå
)->
La°BdAddr
Ë|| ((
UINTPTR
)(
BdPå
) > Addr)) \

128 
Addr
 -(
RögPå
)->
Lígth
; \

131 (
BdPå
Ë(
XAxiDma_Bd
*)(*)
Addr
; \

132 }

	)

151 
	#XAXIDMA_RING_SEEKBACK
(
RögPå
, 
BdPå
, 
NumBd
) \

153 
UINTPTR
 
Addr
 = (UINTPTR)(
BdPå
); \

155 
Addr
 -((
RögPå
)->
Sï¨©i⁄
 * (
NumBd
)); \

156 i‡((
Addr
 < (
RögPå
)->
Fú°BdAddr
Ë|| ((
UINTPTR
)(
BdPå
) < Addr)) \

158 
Addr
 +(
RögPå
)->
Lígth
; \

161 (
BdPå
Ë(
XAxiDma_Bd
*)
Addr
; \

162 }

	)

183 
	$XAxiDma_Upd©eBdRögCDesc
(
XAxiDma_BdRög
* 
RögPå
)

185 
UINTPTR
 
RegBa£
;

186 
UINTPTR
 
BdPå
;

187 
RögIndex
 = 
RögPå
->RingIndex;

190 i‡(
RögPå
->
AŒC¡
 == 0) {

192 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingStart:Ço bds\r\n");

194  
XST_DMA_SG_NO_LIST
;

198 i‡(
RögPå
->
RunSèã
 =
AXIDMA_CHANNEL_NOT_HALTED
) {

202  
XST_SUCCESS
;

205 i‡(!
	`XAxiDma_BdRögHwIsSèπed
(
RögPå
)) {

209 
RegBa£
 = 
RögPå
->
Ch™Ba£
;

214 
BdPå
 = (
UINTPTR
)(*)(
RögPå
->
BdaRe°¨t
);

216 i‡(!
	`XAxiDma_BdHwCom∂ëed
(
BdPå
)) {

217 i‡(
RögPå
->
IsRxCh™√l
) {

218 i‡(!
RögIndex
) {

219 
	`XAxiDma_WrôeReg
(
RegBa£
,

220 
XAXIDMA_CDESC_OFFSET
,

221 (
	`XAXIDMA_VIRT_TO_PHYS
(
BdPå
Ë& 
XAXIDMA_DESC_LSB_MASK
));

222 i‡(
RögPå
->
Addr_ext
)

223 
	`XAxiDma_WrôeReg
(
RegBa£
,

224 
XAXIDMA_CDESC_MSB_OFFSET
,

225 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
BdPå
)));

228 
	`XAxiDma_WrôeReg
(
RegBa£
,

229 (
XAXIDMA_RX_CDESC0_OFFSET
 +

230 (
RögIndex
 - 1Ë* 
XAXIDMA_RX_NDESC_OFFSET
),

231 (
	`XAXIDMA_VIRT_TO_PHYS
(
BdPå
Ë& 
XAXIDMA_DESC_LSB_MASK
));

232 i‡(
RögPå
->
Addr_ext
)

233 
	`XAxiDma_WrôeReg
(
RegBa£
,

234 (
XAXIDMA_RX_CDESC0_MSB_OFFSET
 +

235 (
RögIndex
 - 1Ë* 
XAXIDMA_RX_NDESC_OFFSET
),

236 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
BdPå
)));

240 
	`XAxiDma_WrôeReg
(
RegBa£
,

241 
XAXIDMA_CDESC_OFFSET
,

242 (
	`XAXIDMA_VIRT_TO_PHYS
(
BdPå
Ë& 
XAXIDMA_DESC_LSB_MASK
));

243 i‡(
RögPå
->
Addr_ext
)

244 
	`XAxiDma_WrôeReg
(
RegBa£
, 
XAXIDMA_CDESC_MSB_OFFSET
,

245 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
BdPå
)));

251 
	`XAxiDma_BdHwCom∂ëed
(
BdPå
)) {

252 
BdPå
 = 
	`XAxiDma_BdRögNext
(
RögPå
, BdPtr);

254 i‡((
UINTPTR
)
BdPå
 =(UINTPTRË
RögPå
->
BdaRe°¨t
) {

255 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

258  
XST_DMA_ERROR
;

261 i‡(!
	`XAxiDma_BdHwCom∂ëed
(
BdPå
)) {

262 i‡(
RögPå
->
IsRxCh™√l
) {

263 i‡(!
RögIndex
) {

264 
	`XAxiDma_WrôeReg
(
RegBa£
,

265 
XAXIDMA_CDESC_OFFSET
,

266 (
	`XAXIDMA_VIRT_TO_PHYS
(
BdPå
Ë& 
XAXIDMA_DESC_LSB_MASK
));

267 i‡(
RögPå
->
Addr_ext
)

268 
	`XAxiDma_WrôeReg
(
RegBa£
, 
XAXIDMA_CDESC_MSB_OFFSET
,

269 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
BdPå
)));

272 
	`XAxiDma_WrôeReg
(
RegBa£
,

273 (
XAXIDMA_RX_CDESC0_OFFSET
 +

274 (
RögIndex
 - 1Ë* 
XAXIDMA_RX_NDESC_OFFSET
),

275 (
	`XAXIDMA_VIRT_TO_PHYS
(
BdPå
Ë& 
XAXIDMA_DESC_LSB_MASK
));

276 i‡(
RögPå
->
Addr_ext
)

277 
	`XAxiDma_WrôeReg
(
RegBa£
,

278 (
XAXIDMA_RX_CDESC0_MSB_OFFSET
 +

279 (
RögIndex
 - 1Ë* 
XAXIDMA_RX_NDESC_OFFSET
),

280 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
BdPå
)));

284 
	`XAxiDma_WrôeReg
(
RegBa£
,

285 
XAXIDMA_CDESC_OFFSET
,

286 (
	`XAXIDMA_VIRT_TO_PHYS
(
BdPå
Ë& 
XAXIDMA_DESC_LSB_MASK
));

287 i‡(
RögPå
->
Addr_ext
)

288 
	`XAxiDma_WrôeReg
(
RegBa£
, 
XAXIDMA_CDESC_MSB_OFFSET
,

289 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
BdPå
)));

298  
XST_SUCCESS
;

299 
	}
}

341 
u32
 
	$XAxiDma_BdRögCª©e
(
XAxiDma_BdRög
 *
RögPå
, 
UINTPTR
 
PhysAddr
,

342 
UINTPTR
 
VútAddr
, 
u32
 
Alignmít
, 
BdCou¡
)

344 
i
;

345 
UINTPTR
 
BdVútAddr
;

346 
UINTPTR
 
BdPhysAddr
;

348 i‡(
BdCou¡
 <= 0) {

350 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCreate:Çon-positive BD"

351 "Çumbî %d\r\n", 
BdCou¡
);

353  
XST_INVALID_PARAM
;

360 
RögPå
->
AŒC¡
 = 0;

361 
RögPå
->
FªeC¡
 = 0;

362 
RögPå
->
HwC¡
 = 0;

363 
RögPå
->
PªC¡
 = 0;

364 
RögPå
->
Po°C¡
 = 0;

365 
RögPå
->
Cy˛ic
 = 0;

368 i‡(
Alignmít
 < 
XAXIDMA_BD_MINIMUM_ALIGNMENT
) {

370 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCreate:álignmentÅoo "

371 "smÆ»%d,ÇìdÅÿbê©Üó° %d\r\n", ()
Alignmít
,

372 
XAXIDMA_BD_MINIMUM_ALIGNMENT
);

374  
XST_INVALID_PARAM
;

378 i‡((
Alignmít
 - 1) & Alignment) {

380 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCreate:álignmentÇot"

381 " vÆid %d\r\n", ()
Alignmít
);

383  
XST_INVALID_PARAM
;

387 i‡((
PhysAddr
 % 
Alignmít
Ë|| (
VútAddr
 % Alignment)) {

389 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCreate: Physicaláddress"

391 ()
PhysAddr
, ()
VútAddr
);

393  
XST_INVALID_PARAM
;

397 
RögPå
->
Sï¨©i⁄
 =

398 ((
XAxiDma_Bd
Ë+ (
Alignmít
 - 1)) & ~(Alignment - 1);

403 i‡(
VútAddr
 > (VútAdd∏+ (
RögPå
->
Sï¨©i⁄
 * 
BdCou¡
) - 1)) {

405 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCreate: BD space cross "

408  
XST_DMA_SG_LIST_ERROR
;

417 
	`mem£t
((*Ë
VútAddr
, 0, (
RögPå
->
Sï¨©i⁄
 * 
BdCou¡
));

419 
BdVútAddr
 = 
VútAddr
;

420 
BdPhysAddr
 = 
PhysAddr
 + 
RögPå
->
Sï¨©i⁄
;

421 
i
 = 1; i < 
BdCou¡
; i++) {

422 
	`XAxiDma_BdWrôe
(
BdVútAddr
, 
XAXIDMA_BD_NDESC_OFFSET
,

423 (
BdPhysAddr
 & 
XAXIDMA_DESC_LSB_MASK
));

424 
	`XAxiDma_BdWrôe
(
BdVútAddr
, 
XAXIDMA_BD_NDESC_MSB_OFFSET
,

425 
	`UPPER_32_BITS
(
BdPhysAddr
));

429 
	`XAxiDma_BdWrôe
(
BdVútAddr
, 
XAXIDMA_BD_HAS_STSCNTRL_OFFSET
,

430 (
u32
)
RögPå
->
HasStsC¡æSåm
);

432 
	`XAxiDma_BdWrôe
(
BdVútAddr
, 
XAXIDMA_BD_HAS_DRE_OFFSET
,

433 (((
u32
)(
RögPå
->
HasDRE
)Ë<< 
XAXIDMA_BD_HAS_DRE_SHIFT
) |

434 
RögPå
->
D©aWidth
);

436 
	`XAXIDMA_CACHE_FLUSH
(
BdVútAddr
);

437 
BdVútAddr
 +
RögPå
->
Sï¨©i⁄
;

438 
BdPhysAddr
 +
RögPå
->
Sï¨©i⁄
;

442 
	`XAxiDma_BdWrôe
(
BdVútAddr
, 
XAXIDMA_BD_NDESC_OFFSET
,

443 (
PhysAddr
 & 
XAXIDMA_DESC_LSB_MASK
));

444 
	`XAxiDma_BdWrôe
(
BdVútAddr
, 
XAXIDMA_BD_NDESC_MSB_OFFSET
,

445 
	`UPPER_32_BITS
(
PhysAddr
));

449 
	`XAxiDma_BdWrôe
(
BdVútAddr
, 
XAXIDMA_BD_HAS_STSCNTRL_OFFSET
,

450 (
u32
)
RögPå
->
HasStsC¡æSåm
);

452 
	`XAxiDma_BdWrôe
(
BdVútAddr
, 
XAXIDMA_BD_HAS_DRE_OFFSET
,

453 (((
u32
)(
RögPå
->
HasDRE
)Ë<< 
XAXIDMA_BD_HAS_DRE_SHIFT
) |

454 
RögPå
->
D©aWidth
);

457 
RögPå
->
RunSèã
 = 
AXIDMA_CHANNEL_HALTED
;

458 
RögPå
->
Fú°BdAddr
 = 
VútAddr
;

459 
RögPå
->
Fú°BdPhysAddr
 = 
PhysAddr
;

460 
RögPå
->
La°BdAddr
 = 
BdVútAddr
;

461 
RögPå
->
Lígth
 = RögPå->
La°BdAddr
 - RögPå->
Fú°BdAddr
 +

462 
RögPå
->
Sï¨©i⁄
;

463 
RögPå
->
AŒC¡
 = 
BdCou¡
;

464 
RögPå
->
FªeC¡
 = 
BdCou¡
;

465 
RögPå
->
FªeHód
 = (
XAxiDma_Bd
 *Ë
VútAddr
;

466 
RögPå
->
PªHód
 = (
XAxiDma_Bd
 *Ë
VútAddr
;

467 
RögPå
->
HwHód
 = (
XAxiDma_Bd
 *Ë
VútAddr
;

468 
RögPå
->
HwTaû
 = (
XAxiDma_Bd
 *Ë
VútAddr
;

469 
RögPå
->
Po°Hód
 = (
XAxiDma_Bd
 *Ë
VútAddr
;

470 
RögPå
->
BdaRe°¨t
 = (
XAxiDma_Bd
 *Ë
VútAddr
;

471 
RögPå
->
Cy˛icBd
 = (
XAxiDma_Bd
 *Ë
	`mÆloc
((XAxiDma_Bd));

473  
XST_SUCCESS
;

474 
	}
}

500 
	$XAxiDma_BdRögCl⁄e
(
XAxiDma_BdRög
 * 
RögPå
, 
XAxiDma_Bd
 * 
SrcBdPå
)

502 
i
;

503 
UINTPTR
 
CurBd
;

504 
u32
 
Save
;

505 
XAxiDma_Bd
 
TmpBd
;

508 i‡(
RögPå
->
AŒC¡
 == 0) {

510 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingClone:Ço bds\r\n");

512  
XST_DMA_SG_NO_LIST
;

516 i‡(
RögPå
->
RunSèã
 =
AXIDMA_CHANNEL_NOT_HALTED
) {

518 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingClone: bdÑing started "

521  
XST_DEVICE_IS_STARTED
;

525 i‡(
RögPå
->
FªeC¡
 !RögPå->
AŒC¡
) {

527 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingClone: some bdsálready "

528 "ö u£ %d/%d\r\n",
RögPå
->
FªeC¡
, RögPå->
AŒC¡
);

530  
XST_DMA_SG_LIST_ERROR
;

536 
	`mem˝y
(&
TmpBd
, 
SrcBdPå
, (
XAxiDma_Bd
));

538 
Save
 = 
	`XAxiDma_BdRód
(&
TmpBd
, 
XAXIDMA_BD_STS_OFFSET
);

539 
Save
 &~
XAXIDMA_BD_STS_COMPLETE_MASK
;

540 
	`XAxiDma_BdWrôe
(&
TmpBd
, 
XAXIDMA_BD_STS_OFFSET
, 
Save
);

542 
i
 = 0, 
CurBd
 = 
RögPå
->
Fú°BdAddr
;

543 
i
 < 
RögPå
->
AŒC¡
; i++, 
CurBd
 +RögPå->
Sï¨©i⁄
) {

545 
	`mem˝y
((*)((
UINTPTR
)
CurBd
 + 
XAXIDMA_BD_START_CLEAR
),

546 (*)((
UINTPTR
)(&
TmpBd
Ë+ 
XAXIDMA_BD_START_CLEAR
),

547 
XAXIDMA_BD_BYTES_TO_CLEAR
);

549 
	`XAXIDMA_CACHE_FLUSH
(
CurBd
);

552  
XST_SUCCESS
;

553 
	}
}

574 
	$XAxiDma_SèπBdRögHw
(
XAxiDma_BdRög
 * 
RögPå
)

576 
UINTPTR
 
RegBa£
;

577 
RögIndex
 = 
RögPå
->RingIndex;

579 i‡(!
	`XAxiDma_BdRögHwIsSèπed
(
RögPå
)) {

582 
RegBa£
 = 
RögPå
->
Ch™Ba£
;

583 
	`XAxiDma_WrôeReg
(
RegBa£
, 
XAXIDMA_CR_OFFSET
,

584 
	`XAxiDma_RódReg
(
RegBa£
, 
XAXIDMA_CR_OFFSET
)

585 | 
XAXIDMA_CR_RUNSTOP_MASK
);

588 i‡(
	`XAxiDma_BdRögHwIsSèπed
(
RögPå
)) {

590 
RögPå
->
RunSèã
 = 
AXIDMA_CHANNEL_NOT_HALTED
;

595 i‡(
RögPå
->
HwC¡
 > 0) {

597 
	`XAXIDMA_CACHE_INVALIDATE
(
RögPå
->
HwTaû
);

598 i‡(
RögPå
->
Cy˛ic
) {

599 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
,

600 
XAXIDMA_TDESC_OFFSET
,

601 (
u32
)
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
Cy˛icBd
));

602 i‡(
RögPå
->
Addr_ext
)

603 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
,

604 
XAXIDMA_TDESC_MSB_OFFSET
,

605 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
Cy˛icBd
)));

606  
XST_SUCCESS
;

609 i‡((
	`XAxiDma_BdRód
(
RögPå
->
HwTaû
,

610 
XAXIDMA_BD_STS_OFFSET
) &

611 
XAXIDMA_BD_STS_COMPLETE_MASK
) == 0) {

612 i‡(
RögPå
->
IsRxCh™√l
) {

613 i‡(!
RögIndex
) {

614 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
,

615 
XAXIDMA_TDESC_OFFSET
, (
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
HwTaû
Ë& 
XAXIDMA_DESC_LSB_MASK
));

616 i‡(
RögPå
->
Addr_ext
)

617 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
, 
XAXIDMA_TDESC_MSB_OFFSET
,

618 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
HwTaû
)));

621 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
,

622 (
XAXIDMA_RX_TDESC0_OFFSET
 +

623 (
RögIndex
 - 1Ë* 
XAXIDMA_RX_NDESC_OFFSET
),

624 (
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
HwTaû
Ë& 
XAXIDMA_DESC_LSB_MASK
 ));

625 i‡(
RögPå
->
Addr_ext
)

626 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
,

627 (
XAXIDMA_RX_TDESC0_MSB_OFFSET
 +

628 (
RögIndex
 - 1Ë* 
XAXIDMA_RX_NDESC_OFFSET
),

629 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
HwTaû
)));

633 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
,

634 
XAXIDMA_TDESC_OFFSET
, (
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
HwTaû
Ë& 
XAXIDMA_DESC_LSB_MASK
));

635 i‡(
RögPå
->
Addr_ext
)

636 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
, 
XAXIDMA_TDESC_MSB_OFFSET
,

637 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
HwTaû
)));

642  
XST_SUCCESS
;

645  
XST_DMA_ERROR
;

646 
	}
}

667 
	$XAxiDma_BdRögSèπ
(
XAxiDma_BdRög
 * 
RögPå
)

669 
Sètus
;

671 
Sètus
 = 
	`XAxiDma_Upd©eBdRögCDesc
(
RögPå
);

672 i‡(
Sètus
 !
XST_SUCCESS
) {

673 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingStart: "

675  
Sètus
;

678 
Sètus
 = 
	`XAxiDma_SèπBdRögHw
(
RögPå
);

679 i‡(
Sètus
 !
XST_SUCCESS
) {

680 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingStart: "

682  
Sètus
;

685  
XST_SUCCESS
;

686 
	}
}

711 
	$XAxiDma_BdRögSëCﬂÀs˚
(
XAxiDma_BdRög
 *
RögPå
, 
u32
 
Cou¡î
, u32 
Timî
)

713 
u32
 
Cr
;

715 
Cr
 = 
	`XAxiDma_RódReg
(
RögPå
->
Ch™Ba£
, 
XAXIDMA_CR_OFFSET
);

717 i‡(
Cou¡î
 !
XAXIDMA_NO_CHANGE
) {

718 i‡((
Cou¡î
 == 0) || (Counter > 0xFF)) {

720 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingSetCoalesce: "

721 "övÆid cﬂÀscögÅhªshﬁd %d", ()
Cou¡î
);

722  
XST_FAILURE
;

725 
Cr
 = (C∏& ~
XAXIDMA_COALESCE_MASK
) |

726 (
Cou¡î
 << 
XAXIDMA_COALESCE_SHIFT
);

729 i‡(
Timî
 !
XAXIDMA_NO_CHANGE
) {

730 i‡(
Timî
 > 0xFF) {

732 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingSetCoalesce: "

733 "övÆid dñay cou¡î %d", ()
Timî
);

735  
XST_FAILURE
;

738 
Cr
 = (C∏& ~
XAXIDMA_DELAY_MASK
) |

739 (
Timî
 << 
XAXIDMA_DELAY_SHIFT
);

742 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
, 
XAXIDMA_CR_OFFSET
, 
Cr
);

744  
XST_SUCCESS
;

745 
	}
}

764 
	$XAxiDma_BdRögGëCﬂÀs˚
(
XAxiDma_BdRög
 * 
RögPå
,

765 
u32
 *
Cou¡îPå
, u32 *
TimîPå
)

767 
u32
 
Cr
;

769 
Cr
 = 
	`XAxiDma_RódReg
(
RögPå
->
Ch™Ba£
, 
XAXIDMA_CR_OFFSET
);

771 *
Cou¡îPå
 = ((
Cr
 & 
XAXIDMA_COALESCE_MASK
Ë>> 
XAXIDMA_COALESCE_SHIFT
);

772 *
TimîPå
 = ((
Cr
 & 
XAXIDMA_DELAY_MASK
Ë>> 
XAXIDMA_DELAY_SHIFT
);

773 
	}
}

851 
	$XAxiDma_BdRögAŒoc
(
XAxiDma_BdRög
 * 
RögPå
, 
NumBd
,

852 
XAxiDma_Bd
 ** 
BdSëPå
)

854 i‡(
NumBd
 <= 0) {

856 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingAlloc:Çegative BD "

857 "numbî %d\r\n", 
NumBd
);

859  
XST_INVALID_PARAM
;

863 i‡(
RögPå
->
FªeC¡
 < 
NumBd
) {

864 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

865 "NŸÉnough BD†tÿÆlo¯%d/%d\r\n", 
NumBd
, 
RögPå
->
FªeC¡
);

867  
XST_FAILURE
;

871 *
BdSëPå
 = 
RögPå
->
FªeHód
;

872 
	`XAXIDMA_RING_SEEKAHEAD
(
RögPå
, RögPå->
FªeHód
, 
NumBd
);

873 
RögPå
->
FªeC¡
 -
NumBd
;

874 
RögPå
->
PªC¡
 +
NumBd
;

876  
XST_SUCCESS
;

877 
	}
}

943 
	$XAxiDma_BdRögUnAŒoc
(
XAxiDma_BdRög
 * 
RögPå
, 
NumBd
,

944 
XAxiDma_Bd
 * 
BdSëPå
)

946 
XAxiDma_Bd
 *
TmpBd
;

948 i‡(
NumBd
 <= 0) {

950 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingUnAlloc:Çegative BD"

951 "Çumbî %d\r\n", 
NumBd
);

953  
XST_INVALID_PARAM
;

957 i‡(
RögPå
->
PªC¡
 < 
NumBd
) {

958 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

960 
RögPå
->
PªC¡
, 
NumBd
);

962  
XST_FAILURE
;

968 
TmpBd
 = 
BdSëPå
;

969 
	`XAXIDMA_RING_SEEKAHEAD
(
RögPå
, 
TmpBd
, 
NumBd
);

971 i‡(
TmpBd
 !
RögPå
->
FªeHód
) {

972 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

975  
XST_FAILURE
;

979 
	`XAXIDMA_RING_SEEKBACK
(
RögPå
, RögPå->
FªeHód
, 
NumBd
);

980 
RögPå
->
FªeC¡
 +
NumBd
;

981 
RögPå
->
PªC¡
 -
NumBd
;

983  
XST_SUCCESS
;

984 
	}
}

1018 
	$XAxiDma_BdRögToHw
(
XAxiDma_BdRög
 * 
RögPå
, 
NumBd
,

1019 
XAxiDma_Bd
 * 
BdSëPå
)

1021 
XAxiDma_Bd
 *
CurBdPå
;

1022 
i
;

1023 
u32
 
BdCr
;

1024 
u32
 
BdSts
;

1025 
RögIndex
 = 
RögPå
->RingIndex;

1027 i‡(
NumBd
 < 0) {

1029 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingToHw:Çegative BDÇumber "

1030 "%d\r\n", 
NumBd
);

1032  
XST_INVALID_PARAM
;

1036 i‡(
NumBd
 == 0) {

1037  
XST_SUCCESS
;

1041 i‡((
RögPå
->
PªC¡
 < 
NumBd
Ë|| (RögPå->
PªHód
 !
BdSëPå
)) {

1043 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdÑing hasÖroblems\r\n");

1044  
XST_DMA_SG_LIST_ERROR
;

1047 
CurBdPå
 = 
BdSëPå
;

1048 
BdCr
 = 
	`XAxiDma_BdGëCål
(
CurBdPå
);

1049 
BdSts
 = 
	`XAxiDma_BdGëSts
(
CurBdPå
);

1054 i‡(!(
RögPå
->
IsRxCh™√l
Ë&& !(
BdCr
 & 
XAXIDMA_BD_CTRL_TXSOF_MASK
)) {

1056 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "Tx first BD doesÇot have "

1059  
XST_FAILURE
;

1064 
i
 = 0; i < 
NumBd
 - 1; i++) {

1067 i‡(
	`XAxiDma_BdGëLígth
(
CurBdPå
,

1068 
RögPå
->
MaxTøns„rLí
) == 0) {

1070 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "0Üength bd\r\n");

1072  
XST_FAILURE
;

1075 
BdSts
 &~
XAXIDMA_BD_STS_COMPLETE_MASK
;

1076 
	`XAxiDma_BdWrôe
(
CurBdPå
, 
XAXIDMA_BD_STS_OFFSET
, 
BdSts
);

1079 
	`XAXIDMA_CACHE_FLUSH
(
CurBdPå
);

1081 
CurBdPå
 = (
XAxiDma_Bd
 *)((*)
	`XAxiDma_BdRögNext
(
RögPå
, CurBdPtr));

1082 
BdCr
 = 
	`XAxiDma_BdRód
(
CurBdPå
, 
XAXIDMA_BD_CTRL_LEN_OFFSET
);

1083 
BdSts
 = 
	`XAxiDma_BdRód
(
CurBdPå
, 
XAXIDMA_BD_STS_OFFSET
);

1087 i‡(!(
RögPå
->
IsRxCh™√l
Ë&& !(
BdCr
 & 
XAXIDMA_BD_CTRL_TXEOF_MASK
)) {

1089 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "TxÜast BD doesÇot have "

1092  
XST_FAILURE
;

1096 i‡(
	`XAxiDma_BdGëLígth
(
CurBdPå
,

1097 
RögPå
->
MaxTøns„rLí
) == 0) {

1099 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "0Üength bd\r\n");

1101  
XST_FAILURE
;

1106 
BdSts
 &~
XAXIDMA_BD_STS_COMPLETE_MASK
;

1107 
	`XAxiDma_BdWrôe
(
CurBdPå
, 
XAXIDMA_BD_STS_OFFSET
, 
BdSts
);

1110 
	`XAXIDMA_CACHE_FLUSH
(
CurBdPå
);

1111 
DATA_SYNC
;

1116 
	`XAXIDMA_RING_SEEKAHEAD
(
RögPå
, RögPå->
PªHód
, 
NumBd
);

1117 
RögPå
->
PªC¡
 -
NumBd
;

1118 
RögPå
->
HwTaû
 = 
CurBdPå
;

1119 
RögPå
->
HwC¡
 +
NumBd
;

1122 i‡(
RögPå
->
RunSèã
 =
AXIDMA_CHANNEL_NOT_HALTED
) {

1123 i‡(
RögPå
->
Cy˛ic
) {

1124 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
,

1125 
XAXIDMA_TDESC_OFFSET
,

1126 (
u32
)
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
Cy˛icBd
));

1127 i‡(
RögPå
->
Addr_ext
)

1128 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
,

1129 
XAXIDMA_TDESC_MSB_OFFSET
,

1130 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
Cy˛icBd
)));

1131  
XST_SUCCESS
;

1134 i‡(
RögPå
->
IsRxCh™√l
) {

1135 i‡(!
RögIndex
) {

1136 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
,

1137 
XAXIDMA_TDESC_OFFSET
, (
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
HwTaû
Ë& 
XAXIDMA_DESC_LSB_MASK
));

1138 i‡(
RögPå
->
Addr_ext
)

1139 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
, 
XAXIDMA_TDESC_MSB_OFFSET
,

1140 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
HwTaû
)));

1143 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
,

1144 (
XAXIDMA_RX_TDESC0_OFFSET
 +

1145 (
RögIndex
 - 1Ë* 
XAXIDMA_RX_NDESC_OFFSET
),

1146 (
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
HwTaû
Ë& 
XAXIDMA_DESC_LSB_MASK
 ));

1147 i‡(
RögPå
->
Addr_ext
)

1148 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
,

1149 (
XAXIDMA_RX_TDESC0_MSB_OFFSET
 +

1150 (
RögIndex
 - 1Ë* 
XAXIDMA_RX_NDESC_OFFSET
),

1151 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
HwTaû
)));

1155 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
,

1156 
XAXIDMA_TDESC_OFFSET
, (
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
HwTaû
Ë& 
XAXIDMA_DESC_LSB_MASK
));

1157 i‡(
RögPå
->
Addr_ext
)

1158 
	`XAxiDma_WrôeReg
(
RögPå
->
Ch™Ba£
, 
XAXIDMA_TDESC_MSB_OFFSET
,

1159 
	`UPPER_32_BITS
(
	`XAXIDMA_VIRT_TO_PHYS
(
RögPå
->
HwTaû
)));

1163  
XST_SUCCESS
;

1164 
	}
}

1238 
	$XAxiDma_BdRögFromHw
(
XAxiDma_BdRög
 * 
RögPå
, 
BdLimô
,

1239 
XAxiDma_Bd
 ** 
BdSëPå
)

1241 
XAxiDma_Bd
 *
CurBdPå
;

1242 
BdCou¡
;

1243 
BdP¨tülCou¡
;

1244 
u32
 
BdSts
;

1245 
u32
 
BdCr
;

1247 
CurBdPå
 = 
RögPå
->
HwHód
;

1248 
BdCou¡
 = 0;

1249 
BdP¨tülCou¡
 = 0;

1250 
BdSts
 = 0;

1251 
BdCr
 = 0;

1254 i‡(
RögPå
->
HwC¡
 == 0) {

1255 *
BdSëPå
 = (
XAxiDma_Bd
 *)
NULL
;

1260 i‡(
BdLimô
 > 
RögPå
->
HwC¡
) {

1261 
BdLimô
 = 
RögPå
->
HwC¡
;

1272 
BdCou¡
 < 
BdLimô
) {

1274 
	`XAXIDMA_CACHE_INVALIDATE
(
CurBdPå
);

1275 
BdSts
 = 
	`XAxiDma_BdRód
(
CurBdPå
, 
XAXIDMA_BD_STS_OFFSET
);

1276 
BdCr
 = 
	`XAxiDma_BdRód
(
CurBdPå
, 
XAXIDMA_BD_CTRL_LEN_OFFSET
);

1281 i‡(!(
BdSts
 & 
XAXIDMA_BD_STS_COMPLETE_MASK
)) {

1285 
BdCou¡
++;

1294 i‡(((!(
RögPå
->
IsRxCh™√l
) &&

1295 (
BdCr
 & 
XAXIDMA_BD_CTRL_TXEOF_MASK
)) ||

1296 ((
RögPå
->
IsRxCh™√l
Ë&& (
BdSts
 &

1297 
XAXIDMA_BD_STS_RXEOF_MASK
)))) {

1299 
BdP¨tülCou¡
 = 0;

1302 
BdP¨tülCou¡
++;

1305 i‡(
RögPå
->
Cy˛ic
) {

1306 
BdSts
 = BdSt†& ~
XAXIDMA_BD_STS_COMPLETE_MASK
;

1307 
	`XAxiDma_BdWrôe
(
CurBdPå
, 
XAXIDMA_BD_STS_OFFSET
, 
BdSts
);

1308 
	`XAXIDMA_CACHE_FLUSH
(
CurBdPå
);

1312 i‡(
CurBdPå
 =
RögPå
->
HwTaû
) {

1317 
CurBdPå
 = (
XAxiDma_Bd
 *)((*)
	`XAxiDma_BdRögNext
(
RögPå
, CurBdPtr));

1321 
BdCou¡
 -
BdP¨tülCou¡
;

1326 i‡(
BdCou¡
) {

1327 *
BdSëPå
 = 
RögPå
->
HwHód
;

1328 i‡(!
RögPå
->
Cy˛ic
) {

1329 
RögPå
->
HwC¡
 -
BdCou¡
;

1330 
RögPå
->
Po°C¡
 +
BdCou¡
;

1332 
	`XAXIDMA_RING_SEEKAHEAD
(
RögPå
, RögPå->
HwHód
, 
BdCou¡
);

1334  
BdCou¡
;

1337 *
BdSëPå
 = (
XAxiDma_Bd
 *)
NULL
;

1341 
	}
}

1366 
	$XAxiDma_BdRögFªe
(
XAxiDma_BdRög
 * 
RögPå
, 
NumBd
,

1367 
XAxiDma_Bd
 * 
BdSëPå
)

1369 i‡(
NumBd
 < 0) {

1371 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
,

1372 "BdRögFªe:Çeg©ivêBD†%d\r\n", 
NumBd
);

1374  
XST_INVALID_PARAM
;

1379 i‡(
NumBd
 == 0) {

1380  
XST_SUCCESS
;

1384 i‡((
RögPå
->
Po°C¡
 < 
NumBd
Ë|| (RögPå->
Po°Hód
 !
BdSëPå
)) {

1386 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingFree: Error free BDs: "

1388 
RögPå
->
Po°C¡
, 
NumBd
,

1389 (
UINTPTR
)
RögPå
->
Po°Hód
,

1390 (
UINTPTR
)
BdSëPå
);

1392  
XST_DMA_SG_LIST_ERROR
;

1396 
RögPå
->
FªeC¡
 +
NumBd
;

1397 
RögPå
->
Po°C¡
 -
NumBd
;

1398 
	`XAXIDMA_RING_SEEKAHEAD
(
RögPå
, RögPå->
Po°Hód
, 
NumBd
);

1400  
XST_SUCCESS
;

1401 
	}
}

1429 
	$XAxiDma_BdRögCheck
(
XAxiDma_BdRög
 * 
RögPå
)

1431 
u32
 
AddrV
;

1432 
u32
 
AddrP
;

1433 
i
;

1436 i‡(
RögPå
->
AŒC¡
 == 0) {

1438 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCheck:Ço BDs\r\n");

1440  
XST_DMA_SG_NO_LIST
;

1444 i‡(
RögPå
->
RunSèã
 =
AXIDMA_CHANNEL_NOT_HALTED
) {

1446 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCheck: BdÑing is "

1449  
XST_IS_STARTED
;

1453 i‡(
RögPå
->
RunSèã
 !
AXIDMA_CHANNEL_HALTED
) {

1455 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCheck: unknown BDÑing "

1456 "°©ê%d ", 
RögPå
->
RunSèã
);

1458  
XST_DMA_SG_LIST_ERROR
;

1462 
AddrV
 = (
UINTPTR
Ë
RögPå
->
FªeHód
;

1463 i‡((
AddrV
 < 
RögPå
->
Fú°BdAddr
Ë|| (AddrV > RögPå->
La°BdAddr
)) {

1465 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCheck: FreeHead wrong "

1467 ()
AddrV
,

1468 ()
RögPå
->
Fú°BdAddr
,

1469 ()
RögPå
->
La°BdAddr
);

1471  
XST_DMA_SG_LIST_ERROR
;

1474 
AddrV
 = (
UINTPTR
Ë
RögPå
->
PªHód
;

1475 i‡((
AddrV
 < 
RögPå
->
Fú°BdAddr
Ë|| (AddrV > RögPå->
La°BdAddr
)) {

1477 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCheck: PreHead wrong %x, "

1479 ()
AddrV
,

1480 ()
RögPå
->
Fú°BdAddr
,

1481 ()
RögPå
->
La°BdAddr
);

1483  
XST_DMA_SG_LIST_ERROR
;

1486 
AddrV
 = (
UINTPTR
Ë
RögPå
->
HwHód
;

1487 i‡((
AddrV
 < 
RögPå
->
Fú°BdAddr
Ë|| (AddrV > RögPå->
La°BdAddr
)) {

1489 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCheck: HwHead wrong %x, "

1491 ()
AddrV
,

1492 ()
RögPå
->
Fú°BdAddr
,

1493 ()
RögPå
->
La°BdAddr
);

1495  
XST_DMA_SG_LIST_ERROR
;

1498 
AddrV
 = (
UINTPTR
Ë
RögPå
->
HwTaû
;

1499 i‡((
AddrV
 < 
RögPå
->
Fú°BdAddr
Ë|| (AddrV > RögPå->
La°BdAddr
)) {

1501 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCheck: HwTail wrong %x, "

1503 ()
AddrV
,

1504 ()
RögPå
->
Fú°BdAddr
,

1505 ()
RögPå
->
La°BdAddr
);

1507  
XST_DMA_SG_LIST_ERROR
;

1510 
AddrV
 = (
UINTPTR
Ë
RögPå
->
Po°Hód
;

1511 i‡((
AddrV
 < 
RögPå
->
Fú°BdAddr
Ë|| (AddrV > RögPå->
La°BdAddr
)) {

1513 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCheck: PostHead wrong "

1515 ()
AddrV
,

1516 ()
RögPå
->
Fú°BdAddr
,

1517 ()
RögPå
->
La°BdAddr
);

1519  
XST_DMA_SG_LIST_ERROR
;

1523 i‡((
RögPå
->
HwC¡
 + RögPå->
PªC¡
 + RögPå->
FªeC¡
 +

1524 
RögPå
->
Po°C¡
Ë!RögPå->
AŒC¡
) {

1526 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCheck: internal counter "

1529  
XST_DMA_SG_LIST_ERROR
;

1533 
AddrV
 = 
RögPå
->
Fú°BdAddr
;

1534 
AddrP
 = 
RögPå
->
Fú°BdPhysAddr
 + RögPå->
Sï¨©i⁄
;

1535 
i
 = 1; i < 
RögPå
->
AŒC¡
; i++) {

1536 
	`XAXIDMA_CACHE_INVALIDATE
(
AddrV
);

1540 i‡(
	`XAxiDma_BdRód
(
AddrV
, 
XAXIDMA_BD_NDESC_OFFSET
Ë!
AddrP
) {

1542 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCheck: Next Bd "

1544 ()
	`XAxiDma_BdRód
(
AddrV
,

1545 
XAXIDMA_BD_NDESC_OFFSET
),

1546 ()
AddrP
);

1548  
XST_DMA_SG_LIST_ERROR
;

1552 
AddrV
 +
RögPå
->
Sï¨©i⁄
;

1553 
AddrP
 +
RögPå
->
Sï¨©i⁄
;

1556 
	`XAXIDMA_CACHE_INVALIDATE
(
AddrV
);

1558 i‡(
	`XAxiDma_BdRód
(
AddrV
, 
XAXIDMA_BD_NDESC_OFFSET
) !=

1559 
RögPå
->
Fú°BdPhysAddr
) {

1561 
	`xdbg_¥ötf
(
XDBG_DEBUG_ERROR
, "BdRingCheck:Üast Bd Next BD "

1563 ()
	`XAxiDma_BdRód
(
AddrV
,

1564 
XAXIDMA_BD_NDESC_OFFSET
),

1565 ()
RögPå
->
Fú°BdPhysAddr
);

1567  
XST_DMA_SG_LIST_ERROR
;

1571  
XST_SUCCESS
;

1572 
	}
}

1584 
	$XAxiDma_BdRögDumpRegs
(
XAxiDma_BdRög
 *
RögPå
) {

1585 
UINTPTR
 
RegBa£
 = 
RögPå
->
Ch™Ba£
;

1586 
RögIndex
 = 
RögPå
->RingIndex;

1588 
	`xû_¥ötf
("Dum∞ªgi°î†%p:\r\n", (*)
RegBa£
);

1589 
	`xû_¥ötf
("Control REG: %08x\r\n",

1590 ()
	`XAxiDma_RódReg
(
RegBa£
, 
XAXIDMA_CR_OFFSET
));

1591 
	`xû_¥ötf
("Status REG: %08x\r\n",

1592 ()
	`XAxiDma_RódReg
(
RegBa£
, 
XAXIDMA_SR_OFFSET
));

1594 i‡(
RögIndex
) {

1595 
	`xû_¥ötf
("Cur BD REG: %08x\r\n",

1596 ()
	`XAxiDma_RódReg
(
RegBa£
,

1597 
XAXIDMA_RX_CDESC0_OFFSET
 + ((
RögIndex
 - 1) *

1598 
XAXIDMA_RX_NDESC_OFFSET
)));

1599 
	`xû_¥ötf
("Tail BD REG: %08x\r\n",

1600 ()
	`XAxiDma_RódReg
(
RegBa£
,

1601 
XAXIDMA_RX_TDESC0_OFFSET
 + ((
RögIndex
 - 1) *

1602 
XAXIDMA_RX_NDESC_OFFSET
)));

1605 
	`xû_¥ötf
("Cur BD REG: %08x\r\n",

1606 ()
	`XAxiDma_RódReg
(
RegBa£
, 
XAXIDMA_CDESC_OFFSET
));

1607 
	`xû_¥ötf
("Tail BD REG: %08x\r\n",

1608 ()
	`XAxiDma_RódReg
(
RegBa£
, 
XAXIDMA_TDESC_OFFSET
));

1611 
	`xû_¥ötf
("\r\n");

1612 
	}
}

	@xaxidma_bdring.h

71 #i‚de‡
XAXIDMA_BDRING_H_


72 
	#XAXIDMA_BDRING_H_


	)

74 #ifde‡
__˝lu•lus


80 
	~"x°©us.h
"

81 
	~"xaxidma_bd.h
"

82 
	~<°dlib.h
>

87 
	#AXIDMA_CHANNEL_NOT_HALTED
 1

	)

88 
	#AXIDMA_CHANNEL_HALTED
 2

	)

92 
	#XAXIDMA_NO_CHANGE
 0xFFFFFFFF

	)

93 
	#XAXIDMA_ALL_BDS
 0x0FFFFFFF

	)

102 
UINTPTR
 
Ch™Ba£
;

104 
IsRxCh™√l
;

105 vﬁ©ûê
RunSèã
;

106 
HasStsC¡æSåm
;

107 
HasDRE
;

108 
D©aWidth
;

109 
Addr_ext
;

110 
u32
 
MaxTøns„rLí
;

112 
UINTPTR
 
Fú°BdPhysAddr
;

113 
UINTPTR
 
Fú°BdAddr
;

114 
UINTPTR
 
La°BdAddr
;

115 
u32
 
Lígth
;

116 
UINTPTR
 
Sï¨©i⁄
;

118 
XAxiDma_Bd
 *
FªeHód
;

119 
XAxiDma_Bd
 *
PªHód
;

120 
XAxiDma_Bd
 *
HwHód
;

121 
XAxiDma_Bd
 *
HwTaû
;

122 
XAxiDma_Bd
 *
Po°Hód
;

123 
XAxiDma_Bd
 *
BdaRe°¨t
;

124 
XAxiDma_Bd
 *
Cy˛icBd
;

125 
FªeC¡
;

126 
PªC¡
;

127 
HwC¡
;

128 
Po°C¡
;

129 
AŒC¡
;

130 
RögIndex
;

131 
Cy˛ic
;

132 } 
	tXAxiDma_BdRög
;

156 
	#XAxiDma_BdRögC¡CÆc
(
Alignmít
, 
Byãs
) \

157 (
uöt32_t
)((
Byãs
)/(((
XAxiDma_Bd
)+((
Alignmít
)-1))&~((Alignmít)-1)))

	)

179 
	#XAxiDma_BdRögMemCÆc
(
Alignmít
, 
NumBd
) \

180 ()(((
XAxiDma_Bd
)+((
Alignmít
)-1)Ë& ~((Alignmít)-1))*(
NumBd
)

	)

197 
	#XAxiDma_BdRögGëC¡
(
RögPå
Ë((RögPå)->
AŒC¡
)

	)

214 
	#XAxiDma_BdRögGëFªeC¡
(
RögPå
Ë((RögPå)->
FªeC¡
)

	)

231 
	#XAxiDma_BdRögS«pShŸCuºBd
(
RögPå
) \

233 i‡(!
RögPå
->
IsRxCh™√l
) { \

234 (
RögPå
)->
BdaRe°¨t
 = \

235 (
XAxiDma_Bd
 *)(
UINTPTR
)
	`XAxiDma_RódReg
( \

236 (
RögPå
)->
Ch™Ba£
, \

237 
XAXIDMA_CDESC_OFFSET
); \

239 i‡(!
RögPå
->
RögIndex
) { \

240 (
RögPå
)->
BdaRe°¨t
 = \

241 (
XAxiDma_Bd
 *)(
UINTPTR
)
	`XAxiDma_RódReg
( \

242 (
RögPå
)->
Ch™Ba£
, \

243 
XAXIDMA_CDESC_OFFSET
); \

245 (
RögPå
)->
BdaRe°¨t
 = \

246 (
XAxiDma_Bd
 *)(
UINTPTR
)
	`XAxiDma_RódReg
( \

247 (
RögPå
)->
Ch™Ba£
, \

248 (
XAXIDMA_RX_CDESC0_OFFSET
 + \

249 (
RögPå
->
RögIndex
 - 1) * \

250 
XAXIDMA_RX_NDESC_OFFSET
)); \

253 }

	)

269 
	#XAxiDma_BdRögGëCuºBd
(
RögPå
) \

270 (
XAxiDma_Bd
 *)
	`XAxiDma_RódReg
((
RögPå
)->
Ch™Ba£
, \

271 
XAXIDMA_CDESC_OFFSET
) \

272 

	)

289 
	#XAxiDma_BdRögNext
(
RögPå
, 
BdPå
) \

290 (((
UINTPTR
)(
BdPå
Ë>(
RögPå
)->
La°BdAddr
) ? \

291 (
UINTPTR
)(
RögPå
)->
Fú°BdAddr
 : \

292 (
UINTPTR
)((UINTPTR)(
BdPå
Ë+ (
RögPå
)->
Sï¨©i⁄
))

	)

310 
	#XAxiDma_BdRögPªv
(
RögPå
, 
BdPå
) \

311 (((
u32
)(
BdPå
Ë<(
RögPå
)->
Fú°BdAddr
) ? \

312 (
XAxiDma_Bd
*)(
RögPå
)->
La°BdAddr
 : \

313 (
XAxiDma_Bd
*)((
u32
)(
BdPå
Ë- (
RögPå
)->
Sï¨©i⁄
))

	)

329 
	#XAxiDma_BdRögGëSr
(
RögPå
) \

330 
	`XAxiDma_RódReg
((
RögPå
)->
Ch™Ba£
, 
XAXIDMA_SR_OFFSET
)

	)

347 
	#XAxiDma_BdRögGëEº‹
(
RögPå
) \

348 (
	`XAxiDma_RódReg
((
RögPå
)->
Ch™Ba£
, 
XAXIDMA_SR_OFFSET
) \

349 & 
XAXIDMA_ERR_ALL_MASK
)

	)

366 
	#XAxiDma_BdRögHwIsSèπed
(
RögPå
) \

367 ((
	`XAxiDma_RódReg
((
RögPå
)->
Ch™Ba£
, 
XAXIDMA_SR_OFFSET
) \

368 & 
XAXIDMA_HALTED_MASK
Ë? 
FALSE
 : 
TRUE
)

	)

386 
	#XAxiDma_BdRögBusy
(
RögPå
) \

387 (
	`XAxiDma_BdRögHwIsSèπed
(
RögPå
) && \

388 ((
	`XAxiDma_RódReg
((
RögPå
)->
Ch™Ba£
, 
XAXIDMA_SR_OFFSET
) \

389 & 
XAXIDMA_IDLE_MASK
Ë? 
FALSE
 : 
TRUE
))

	)

406 
	#XAxiDma_BdRögI¡E«bÀ
(
RögPå
, 
Mask
) \

407 (
	`XAxiDma_WrôeReg
((
RögPå
)->
Ch™Ba£
, 
XAXIDMA_CR_OFFSET
, \

408 
	`XAxiDma_RódReg
((
RögPå
)->
Ch™Ba£
, 
XAXIDMA_CR_OFFSET
) \

409 | ((
Mask
Ë& 
XAXIDMA_IRQ_ALL_MASK
)))

	)

425 
	#XAxiDma_BdRögI¡GëE«bÀd
(
RögPå
) \

426 (
	`XAxiDma_RódReg
((
RögPå
)->
Ch™Ba£
, 
XAXIDMA_CR_OFFSET
) \

427 & 
XAXIDMA_IRQ_ALL_MASK
)

	)

445 
	#XAxiDma_BdRögI¡DißbÀ
(
RögPå
, 
Mask
) \

446 (
	`XAxiDma_WrôeReg
((
RögPå
)->
Ch™Ba£
, 
XAXIDMA_CR_OFFSET
, \

447 
	`XAxiDma_RódReg
((
RögPå
)->
Ch™Ba£
, 
XAXIDMA_CR_OFFSET
) & \

448 ~((
Mask
Ë& 
XAXIDMA_IRQ_ALL_MASK
)))

	)

467 
	#XAxiDma_BdRögGëIrq
(
RögPå
) \

468 (
	`XAxiDma_RódReg
((
RögPå
)->
Ch™Ba£
, 
XAXIDMA_SR_OFFSET
) \

469 & 
XAXIDMA_IRQ_ALL_MASK
)

	)

485 
	#XAxiDma_BdRögAckIrq
(
RögPå
, 
Mask
) \

486 
	`XAxiDma_WrôeReg
((
RögPå
)->
Ch™Ba£
, 
XAXIDMA_SR_OFFSET
,\

487 (
Mask
Ë& 
XAXIDMA_IRQ_ALL_MASK
)

	)

501 
	#XAxiDma_BdRögE«bÀCy˛icDMA
(
RögPå
) \

502 (
RögPå
->
Cy˛ic
 = 1)

	)

511 
XAxiDma_SèπBdRögHw
(
XAxiDma_BdRög
* 
RögPå
);

512 
XAxiDma_Upd©eBdRögCDesc
(
XAxiDma_BdRög
* 
RögPå
);

513 
u32
 
XAxiDma_BdRögCª©e
(
XAxiDma_BdRög
 * 
RögPå
, 
UINTPTR
 
PhysAddr
,

514 
UINTPTR
 
VútAddr
, 
u32
 
Alignmít
, 
BdCou¡
);

515 
XAxiDma_BdRögCl⁄e
(
XAxiDma_BdRög
 * 
RögPå
, 
XAxiDma_Bd
 * 
SrcBdPå
);

516 
XAxiDma_BdRögAŒoc
(
XAxiDma_BdRög
 * 
RögPå
, 
NumBd
,

517 
XAxiDma_Bd
 ** 
BdSëPå
);

518 
XAxiDma_BdRögUnAŒoc
(
XAxiDma_BdRög
 * 
RögPå
, 
NumBd
,

519 
XAxiDma_Bd
 * 
BdSëPå
);

520 
XAxiDma_BdRögToHw
(
XAxiDma_BdRög
 * 
RögPå
, 
NumBd
,

521 
XAxiDma_Bd
 * 
BdSëPå
);

522 
XAxiDma_BdRögFromHw
(
XAxiDma_BdRög
 * 
RögPå
, 
BdLimô
,

523 
XAxiDma_Bd
 ** 
BdSëPå
);

524 
XAxiDma_BdRögFªe
(
XAxiDma_BdRög
 * 
RögPå
, 
NumBd
,

525 
XAxiDma_Bd
 * 
BdSëPå
);

526 
XAxiDma_BdRögSèπ
(
XAxiDma_BdRög
 * 
RögPå
);

527 
XAxiDma_BdRögSëCﬂÀs˚
(
XAxiDma_BdRög
 * 
RögPå
, 
u32
 
Cou¡î
, u32 
Timî
);

528 
XAxiDma_BdRögGëCﬂÀs˚
(
XAxiDma_BdRög
 * 
RögPå
,

529 
u32
 *
Cou¡îPå
, u32 *
TimîPå
);

533 
XAxiDma_BdRögCheck
(
XAxiDma_BdRög
 * 
RögPå
);

534 
XAxiDma_BdRögDumpRegs
(
XAxiDma_BdRög
 *
RögPå
);

535 #ifde‡
__˝lu•lus


	@xaxidma_g.c

32 
	~"x∑ømëîs.h
"

33 
	~"xaxidma.h
"

39 
XAxiDma_C⁄fig
 
	gXAxiDma_C⁄figTabÀ
[
XPAR_XAXIDMA_NUM_INSTANCES
] =

42 
XPAR_AXI_DMA_0_DEVICE_ID
,

43 
XPAR_AXI_DMA_0_BASEADDR
,

44 
XPAR_AXI_DMA_0_SG_INCLUDE_STSCNTRL_STRM
,

45 
XPAR_AXI_DMA_0_INCLUDE_MM2S
,

46 
XPAR_AXI_DMA_0_INCLUDE_MM2S_DRE
,

47 
XPAR_AXI_DMA_0_M_AXI_MM2S_DATA_WIDTH
,

48 
XPAR_AXI_DMA_0_INCLUDE_S2MM
,

49 
XPAR_AXI_DMA_0_INCLUDE_S2MM_DRE
,

50 
XPAR_AXI_DMA_0_M_AXI_S2MM_DATA_WIDTH
,

51 
XPAR_AXI_DMA_0_INCLUDE_SG
,

52 
XPAR_AXI_DMA_0_NUM_MM2S_CHANNELS
,

53 
XPAR_AXI_DMA_0_NUM_S2MM_CHANNELS
,

54 
XPAR_AXI_DMA_0_MM2S_BURST_SIZE
,

55 
XPAR_AXI_DMA_0_S2MM_BURST_SIZE
,

56 
XPAR_AXI_DMA_0_MICRO_DMA
,

57 
XPAR_AXI_DMA_0_ADDR_WIDTH
,

58 
XPAR_AXI_DMA_0_SG_LENGTH_WIDTH


	@xaxidma_hw.h

55 #i‚de‡
XAXIDMA_HW_H_


56 
	#XAXIDMA_HW_H_


	)

58 #ifde‡
__˝lu•lus


67 
	#XAXIDMA_DMA_TO_DEVICE
 0x00

	)

68 
	#XAXIDMA_DEVICE_TO_DMA
 0x01

	)

74 
	#XAXIDMA_BD_MINIMUM_ALIGNMENT
 0x40

	)

83 
	#XAXIDMA_MICROMODE_MIN_BUF_ALIGN
 0xFFF

	)

92 
	#XAXIDMA_MCHAN_MAX_TRANSFER_LEN
 0x00FFFF

	)

102 
	#XAXIDMA_TX_OFFSET
 0x00000000

	)

104 
	#XAXIDMA_RX_OFFSET
 0x00000030

	)

111 
	#XAXIDMA_CR_OFFSET
 0x00000000

	)

112 
	#XAXIDMA_SR_OFFSET
 0x00000004

	)

113 
	#XAXIDMA_CDESC_OFFSET
 0x00000008

	)

114 
	#XAXIDMA_CDESC_MSB_OFFSET
 0x0000000C

	)

115 
	#XAXIDMA_TDESC_OFFSET
 0x00000010

	)

116 
	#XAXIDMA_TDESC_MSB_OFFSET
 0x00000014

	)

117 
	#XAXIDMA_SRCADDR_OFFSET
 0x00000018

	)

119 
	#XAXIDMA_SRCADDR_MSB_OFFSET
 0x0000001C

	)

121 
	#XAXIDMA_DESTADDR_OFFSET
 0x00000018

	)

122 
	#XAXIDMA_DESTADDR_MSB_OFFSET
 0x0000001C

	)

123 
	#XAXIDMA_BUFFLEN_OFFSET
 0x00000028

	)

124 
	#XAXIDMA_SGCTL_OFFSET
 0x0000002¯

	)

127 
	#XAXIDMA_RX_CDESC0_OFFSET
 0x00000040

	)

128 
	#XAXIDMA_RX_CDESC0_MSB_OFFSET
 0x00000044

	)

129 
	#XAXIDMA_RX_TDESC0_OFFSET
 0x00000048

	)

130 
	#XAXIDMA_RX_TDESC0_MSB_OFFSET
 0x0000004C

	)

131 
	#XAXIDMA_RX_NDESC_OFFSET
 0x00000020

	)

137 
	#XAXIDMA_CR_RUNSTOP_MASK
 0x00000001

	)

138 
	#XAXIDMA_CR_RESET_MASK
 0x00000004

	)

139 
	#XAXIDMA_CR_KEYHOLE_MASK
 0x00000008

	)

140 
	#XAXIDMA_CR_CYCLIC_MASK
 0x00000010

	)

155 
	#XAXIDMA_HALTED_MASK
 0x00000001

	)

156 
	#XAXIDMA_IDLE_MASK
 0x00000002

	)

157 
	#XAXIDMA_ERR_INTERNAL_MASK
 0x00000010

	)

159 
	#XAXIDMA_ERR_SLAVE_MASK
 0x00000020

	)

160 
	#XAXIDMA_ERR_DECODE_MASK
 0x00000040

	)

162 
	#XAXIDMA_ERR_SG_INT_MASK
 0x00000100

	)

163 
	#XAXIDMA_ERR_SG_SLV_MASK
 0x00000200

	)

164 
	#XAXIDMA_ERR_SG_DEC_MASK
 0x00000400

	)

165 
	#XAXIDMA_ERR_ALL_MASK
 0x00000770

	)

172 
	#XAXIDMA_IRQ_IOC_MASK
 0x00001000

	)

173 
	#XAXIDMA_IRQ_DELAY_MASK
 0x00002000

	)

174 
	#XAXIDMA_IRQ_ERROR_MASK
 0x00004000

	)

175 
	#XAXIDMA_IRQ_ALL_MASK
 0x00007000

	)

183 
	#XAXIDMA_DELAY_MASK
 0xFF000000

	)

185 
	#XAXIDMA_COALESCE_MASK
 0x00FF0000

	)

187 
	#XAXIDMA_DELAY_SHIFT
 24

	)

188 
	#XAXIDMA_COALESCE_SHIFT
 16

	)

201 
	#XAXIDMA_BD_NDESC_OFFSET
 0x00

	)

202 
	#XAXIDMA_BD_NDESC_MSB_OFFSET
 0x04

	)

203 
	#XAXIDMA_BD_BUFA_OFFSET
 0x08

	)

204 
	#XAXIDMA_BD_BUFA_MSB_OFFSET
 0x0C

	)

205 
	#XAXIDMA_BD_MCCTL_OFFSET
 0x10

	)

206 
	#XAXIDMA_BD_STRIDE_VSIZE_OFFSET
 0x14

	)

207 
	#XAXIDMA_BD_CTRL_LEN_OFFSET
 0x18

	)

208 
	#XAXIDMA_BD_STS_OFFSET
 0x1C

	)

210 
	#XAXIDMA_BD_USR0_OFFSET
 0x20

	)

211 
	#XAXIDMA_BD_USR1_OFFSET
 0x24

	)

212 
	#XAXIDMA_BD_USR2_OFFSET
 0x28

	)

213 
	#XAXIDMA_BD_USR3_OFFSET
 0x2C

	)

214 
	#XAXIDMA_BD_USR4_OFFSET
 0x30

	)

216 
	#XAXIDMA_BD_ID_OFFSET
 0x34

	)

217 
	#XAXIDMA_BD_HAS_STSCNTRL_OFFSET
 0x38

	)

218 
	#XAXIDMA_BD_HAS_DRE_OFFSET
 0x3C

	)

220 
	#XAXIDMA_BD_HAS_DRE_MASK
 0xF00

	)

221 
	#XAXIDMA_BD_WORDLEN_MASK
 0xFF

	)

223 
	#XAXIDMA_BD_HAS_DRE_SHIFT
 8

	)

224 
	#XAXIDMA_BD_WORDLEN_SHIFT
 0

	)

226 
	#XAXIDMA_BD_START_CLEAR
 8

	)

227 
	#XAXIDMA_BD_BYTES_TO_CLEAR
 48

	)

230 
	#XAXIDMA_BD_NUM_WORDS
 16U

	)

232 
	#XAXIDMA_BD_HW_NUM_BYTES
 52

	)

236 
	#XAXIDMA_LAST_APPWORD
 4

	)

239 
	#XAXIDMA_DESC_LSB_MASK
 (0xFFFFFFC0UË

	)

244 
	#XAXIDMA_BD_CTRL_TXSOF_MASK
 0x08000000

	)

245 
	#XAXIDMA_BD_CTRL_TXEOF_MASK
 0x04000000

	)

246 
	#XAXIDMA_BD_CTRL_ALL_MASK
 0x0C000000

	)

252 
	#XAXIDMA_BD_STS_COMPLETE_MASK
 0x80000000

	)

253 
	#XAXIDMA_BD_STS_DEC_ERR_MASK
 0x40000000

	)

254 
	#XAXIDMA_BD_STS_SLV_ERR_MASK
 0x20000000

	)

255 
	#XAXIDMA_BD_STS_INT_ERR_MASK
 0x10000000

	)

256 
	#XAXIDMA_BD_STS_ALL_ERR_MASK
 0x70000000

	)

257 
	#XAXIDMA_BD_STS_RXSOF_MASK
 0x08000000

	)

258 
	#XAXIDMA_BD_STS_RXEOF_MASK
 0x04000000

	)

259 
	#XAXIDMA_BD_STS_ALL_MASK
 0xFC000000

	)

265 
	#XAXIDMA_BD_TDEST_FIELD_MASK
 0x0000000F

	)

266 
	#XAXIDMA_BD_TID_FIELD_MASK
 0x00000F00

	)

267 
	#XAXIDMA_BD_TUSER_FIELD_MASK
 0x000F0000

	)

268 
	#XAXIDMA_BD_ARCACHE_FIELD_MASK
 0x0F000000

	)

269 
	#XAXIDMA_BD_ARUSER_FIELD_MASK
 0xF0000000

	)

271 
	#XAXIDMA_BD_TDEST_FIELD_SHIFT
 0

	)

272 
	#XAXIDMA_BD_TID_FIELD_SHIFT
 8

	)

273 
	#XAXIDMA_BD_TUSER_FIELD_SHIFT
 16

	)

274 
	#XAXIDMA_BD_ARCACHE_FIELD_SHIFT
 24

	)

275 
	#XAXIDMA_BD_ARUSER_FIELD_SHIFT
 28

	)

281 
	#XAXIDMA_BD_STRIDE_FIELD_MASK
 0x0000FFFF

	)

282 
	#XAXIDMA_BD_VSIZE_FIELD_MASK
 0xFFF80000

	)

284 
	#XAXIDMA_BD_STRIDE_FIELD_SHIFT
 0

	)

285 
	#XAXIDMA_BD_VSIZE_FIELD_SHIFT
 19

	)

292 
	#XAxiDma_In32
 
Xû_In32


	)

293 
	#XAxiDma_Out32
 
Xû_Out32


	)

310 
	#XAxiDma_RódReg
(
Ba£Addªss
, 
RegOff£t
) \

311 –*((
Ba£Addªss
Ë+ (
RegOff£t
)Ë)

	)

329 
	#XAxiDma_WrôeReg
(
Ba£Addªss
, 
RegOff£t
, 
D©a
) \

330 (*(
Ba£Addªss
 + 
RegOff£t
Ë
D©a
)

	)

332 #ifde‡
__˝lu•lus


	@xaxidma_porting_guide.h

	@xaxidma_selftest.c

47 
	~"xû_io.h
"

48 
	~"xaxidma.h
"

52 
	#XAXIDMA_RESET_TIMEOUT
 500

	)

82 
	$XAxiDma_Sñ·e°
(
XAxiDma
 * 
In°™˚På
)

84 
TimeOut
;

86 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

88 
	`XAxiDma_Re£t
(
In°™˚På
);

92 
TimeOut
 = 
XAXIDMA_RESET_TIMEOUT
;

94 
TimeOut
) {

96 if(
	`XAxiDma_Re£tIsD⁄e
(
In°™˚På
)) {

100 
TimeOut
 -= 1;

104 i‡(!
TimeOut
)

105  
XST_FAILURE
;

107  
XST_SUCCESS
;

108 
	}
}

	@xaxidma_sinit.c

56 
	~"x∑ømëîs.h
"

57 
	~"xaxidma.h
"

73 
XAxiDma_C⁄fig
 *
	$XAxiDma_LookupC⁄fig
(
u32
 
Devi˚Id
)

75 
XAxiDma_C⁄fig
 
XAxiDma_C⁄figTabÀ
[];

76 
XAxiDma_C⁄fig
 *
CfgPå
;

77 
u32
 
Index
;

79 
CfgPå
 = 
NULL
;

81 
Index
 = 0; Index < 
XPAR_XAXIDMA_NUM_INSTANCES
; Index++) {

82 i‡(
XAxiDma_C⁄figTabÀ
[
Index
].
Devi˚Id
 == DeviceId) {

84 
CfgPå
 = &
XAxiDma_C⁄figTabÀ
[
Index
];

89  
CfgPå
;

90 
	}
}

105 
XAxiDma_C⁄fig
 *
	$XAxiDma_LookupC⁄figBa£Addr
(
UINTPTR
 
Ba£addr
)

107 
XAxiDma_C⁄fig
 
XAxiDma_C⁄figTabÀ
[];

108 
XAxiDma_C⁄fig
 *
CfgPå
;

109 
u32
 
Index
;

111 
CfgPå
 = 
NULL
;

113 
Index
 = 0; Index < 
XPAR_XAXIDMA_NUM_INSTANCES
; Index++) {

114 i‡(
XAxiDma_C⁄figTabÀ
[
Index
].
Ba£Addr
 =
Ba£addr
) {

116 
CfgPå
 = &
XAxiDma_C⁄figTabÀ
[
Index
];

121  
CfgPå
;

122 
	}
}

	@xdebug.h

26 #i‚de‡
_XDEBUG_H


27 
	#_XDEBUG_H


	)

29 #i‡
deföed
(
DEBUG
Ë&& !deföed(
NDEBUG
)

31 
	~<°dio.h
>

33 #i‚de‡
XDEBUG_WARNING


34 
	#XDEBUG_WARNING


	)

35 #w¨nög 
DEBUG
 
is
 
íabÀd


38 
	#XDBG_DEBUG_ERROR
 0x00000001

	)

39 
	#XDBG_DEBUG_GENERAL
 0x00000002

	)

40 
	#XDBG_DEBUG_ALL
 0xFFFFFFFF

	)

42 
	#XDBG_DEBUG_FIFO_REG
 0x00000100

	)

43 
	#XDBG_DEBUG_FIFO_RX
 0x00000101

	)

44 
	#XDBG_DEBUG_FIFO_TX
 0x00000102

	)

45 
	#XDBG_DEBUG_FIFO_ALL
 0x0000010F

	)

47 
	#XDBG_DEBUG_TEMAC_REG
 0x00000400

	)

48 
	#XDBG_DEBUG_TEMAC_RX
 0x00000401

	)

49 
	#XDBG_DEBUG_TEMAC_TX
 0x00000402

	)

50 
	#XDBG_DEBUG_TEMAC_ALL
 0x0000040F

	)

52 
	#XDBG_DEBUG_TEMAC_ADPT_RX
 0x00000800

	)

53 
	#XDBG_DEBUG_TEMAC_ADPT_TX
 0x00000801

	)

54 
	#XDBG_DEBUG_TEMAC_ADPT_IOCTL
 0x00000802

	)

55 
	#XDBG_DEBUG_TEMAC_ADPT_MISC
 0x00000803

	)

56 
	#XDBG_DEBUG_TEMAC_ADPT_ALL
 0x0000080F

	)

58 
	#xdbg_cuºít_ty≥s
 (
XDBG_DEBUG_ERROR
)

	)

60 
	#xdbg_°m¡
(
x
Ë
	)
x

65 #i‡
deföed
(
XENV_VXWORKS
Ë&& deföed(
_WRS_GNU_VAR_MACROS
)

66 
	#xdbg_¥ötf
(
ty≥
, 
¨gs
...Ë((—y≥Ë& 
xdbg_cuºít_ty≥s
Ë? 
	`¥ötf
 (##árgsË: 0)

	)

70 
	#xdbg_¥ötf
(
ty≥
, ...Ë((—y≥Ë& 
xdbg_cuºít_ty≥s
Ë? 
	`¥ötf
 (
__VA_ARGS__
Ë: 0)

	)

76 
	#xdbg_°m¡
(
x
)

	)

79 #i‡
deföed
(
XENV_VXWORKS
Ë&& deföed(
_WRS_GNU_VAR_MACROS
)

80 
	#xdbg_¥ötf
(
ty≥
, 
¨gs
...)

	)

82 
	#xdbg_¥ötf
(...)

	)

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

406 
	~<bôs/Êﬂä.h
>

407 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

408 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

409 #ifde‡
__REDIRECT


410 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

411 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

412 
__isoc99_fsˇnf
Ë
__wur
;

413 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

414 
__isoc99_sˇnf
Ë
__wur
;

415 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

416 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

417 
__isoc99_ssˇnf
);

419 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

420 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

422 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

423 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

424 
	#fsˇnf
 
__isoc99_fsˇnf


	)

425 
	#sˇnf
 
__isoc99_sˇnf


	)

426 
	#ssˇnf
 
__isoc99_ssˇnf


	)

430 #ifdef 
__USE_ISOC99


435 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

436 
__gnuc_va_li°
 
__¨g
)

437 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

443 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

444 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

447 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

448 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

449 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

452 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

453 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT
 \

454 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

455 
	`__REDIRECT
 (
vfsˇnf
,

456 (
FILE
 *
__ª°ri˘
 
__s
,

457 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

458 
__isoc99_vfsˇnf
)

459 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

460 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

462 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

463 
	`__REDIRECT_NTH
 (
vssˇnf
,

464 (c⁄° *
__ª°ri˘
 
__s
,

465 c⁄° *
__ª°ri˘
 
__f‹m©
,

466 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

467 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

468 #ñi‡!
deföed
 
__REDIRECT


469 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

470 c⁄° *
__ª°ri˘
 
__f‹m©
,

471 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

472 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

473 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

474 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

475 c⁄° *
__ª°ri˘
 
__f‹m©
,

476 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

477 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

478 
	#vsˇnf
 
__isoc99_vsˇnf


	)

479 
	#vssˇnf
 
__isoc99_vssˇnf


	)

489 
	`fgëc
 (
FILE
 *
__°ªam
);

490 
	`gëc
 (
FILE
 *
__°ªam
);

496 
	`gëch¨
 ();

498 #ifde‡
__USE_POSIX199506


503 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

504 
	`gëch¨_u∆ocked
 ();

507 #ifde‡
__USE_MISC


514 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

525 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

526 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

532 
	`putch¨
 (
__c
);

534 #ifde‡
__USE_MISC


541 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

544 #ifde‡
__USE_POSIX199506


549 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

550 
	`putch¨_u∆ocked
 (
__c
);

554 #i‡
deföed
 
__USE_MISC
 \

555 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

557 
	`gëw
 (
FILE
 *
__°ªam
);

560 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

568 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

569 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

571 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

581 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

584 #ifde‡
__USE_GNU


591 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

592 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


593 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

597 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

608 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

609 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

610 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

611 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

612 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

613 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

621 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

622 
size_t
 *
__ª°ri˘
 
__n
,

623 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

631 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

637 
	`puts
 (c⁄° *
__s
);

644 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

651 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

652 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

657 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

658 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

660 #ifde‡
__USE_GNU


667 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

668 
FILE
 *
__ª°ri˘
 
__°ªam
);

671 #ifde‡
__USE_MISC


678 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

679 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

680 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

681 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

689 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

694 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

699 
	`ªwöd
 (
FILE
 *
__°ªam
);

706 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


707 #i‚de‡
__USE_FILE_OFFSET64


712 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

717 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

719 #ifde‡
__REDIRECT


720 
	`__REDIRECT
 (
f£eko
,

721 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

722 
f£eko64
);

723 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

725 
	#f£eko
 
f£eko64


	)

726 
	#·ñlo
 
·ñlo64


	)

731 #i‚de‡
__USE_FILE_OFFSET64


736 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

741 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

743 #ifde‡
__REDIRECT


744 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

745 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

746 
	`__REDIRECT
 (
f£ços
,

747 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

749 
	#fgëpos
 
fgëpos64


	)

750 
	#f£ços
 
f£ços64


	)

754 #ifde‡
__USE_LARGEFILE64


755 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

756 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

757 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

758 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

762 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

764 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

766 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

768 #ifde‡
__USE_MISC


770 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

771 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

772 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

780 
	`≥º‹
 (c⁄° *
__s
);

783 #ifdef 
__USE_POSIX


785 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

788 #ifde‡
__USE_MISC


790 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

794 #ifde‡
__USE_POSIX2


799 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

805 
	`p˛o£
 (
FILE
 *
__°ªam
);

809 #ifdef 
__USE_POSIX


811 *
	$˘îmid
 (*
__s
Ë
__THROW
;

815 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


817 *
	`cu£rid
 (*
__s
);

821 #ifdef 
__USE_GNU


822 
ob°ack
;

825 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

826 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

827 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

828 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

829 c⁄° *
__ª°ri˘
 
__f‹m©
,

830 
__gnuc_va_li°
 
__¨gs
)

831 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

835 #ifde‡
__USE_POSIX199506


839 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

843 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

846 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

849 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


852 
	~<bôs/gë›t_posix.h
>

857 
	`__uÊow
 (
FILE
 *);

858 
	`__ovîÊow
 (
FILE
 *, );

862 #ifde‡
__USE_EXTERN_INLINES


863 
	~<bôs/°dio.h
>

865 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


866 
	~<bôs/°dio2.h
>

869 
	~<bôs/Êﬂä.h
>

870 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

871 
	~<bôs/°dio-ldbl.h
>

874 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


540 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

542 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

543 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

550 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

551 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

553 #ifde‡
__USE_MISC


559 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

560 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


561 
	`__©åibuã_Æloc_size__
 ((2, 3));

565 
	$‰ì
 (*
__±r
Ë
__THROW
;

567 #ifde‡
__USE_MISC


568 
	~<Æloˇ.h
>

571 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

572 || 
deföed
 
__USE_MISC


574 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


575 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

578 #ifde‡
__USE_XOPEN2K


580 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

584 #ifde‡
__USE_ISOC11


586 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

591 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

595 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

597 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


599 #ifde‡
__˝lu•lus


600 "C++" 
	`©_quick_exô
 ((*
__func
) ())

601 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

603 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

607 #ifdef 
__USE_MISC


610 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

611 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

619 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


623 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #ifde‡
__USE_ISOC99


629 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

634 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__USE_GNU


639 *
	$£cuª_gëív
 (c⁄° *
__«me
)

640 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


647 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

650 #ifde‡
__USE_XOPEN2K


653 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

654 
__THROW
 
	`__n⁄nuŒ
 ((2));

657 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

660 #ifdef 
__USE_MISC


664 
	$˛óªnv
 (Ë
__THROW
;

668 #i‡
deföed
 
__USE_MISC
 \

669 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

675 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

678 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


687 #i‚de‡
__USE_FILE_OFFSET64


688 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

690 #ifde‡
__REDIRECT


691 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

692 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

694 
	#mk°emp
 
mk°emp64


	)

697 #ifde‡
__USE_LARGEFILE64


698 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 #ifde‡
__USE_MISC


709 #i‚de‡
__USE_FILE_OFFSET64


710 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

714 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

716 
	#mk°emps
 
mk°emps64


	)

719 #ifde‡
__USE_LARGEFILE64


720 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

721 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

725 #ifde‡
__USE_XOPEN2K8


731 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

734 #ifde‡
__USE_GNU


741 #i‚de‡
__USE_FILE_OFFSET64


742 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

746 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

748 
	#mko°emp
 
mko°emp64


	)

751 #ifde‡
__USE_LARGEFILE64


752 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

761 #i‚de‡
__USE_FILE_OFFSET64


762 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

763 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

765 #ifde‡
__REDIRECT


766 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

767 
__Êags
), 
mko°emps64
)

768 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

770 
	#mko°emps
 
mko°emps64


	)

773 #ifde‡
__USE_LARGEFILE64


774 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

784 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

787 #ifdef 
__USE_GNU


790 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

794 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


800 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

801 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

806 #i‚de‡
__COMPAR_FN_T


807 
	#__COMPAR_FN_T


	)

808 (*
	t__com∑r_‚_t
) (const *, const *);

810 #ifdef 
__USE_GNU


811 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

814 #ifde‡
__USE_GNU


815 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

820 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

821 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

822 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

824 #ifde‡
__USE_EXTERN_INLINES


825 
	~<bôs/°dlib-b£¨ch.h
>

830 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

832 #ifde‡
__USE_GNU


833 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

834 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

835 
	`__n⁄nuŒ
 ((1, 4));

840 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

841 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

843 #ifde‡
__USE_ISOC99


844 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

845 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

852 
div_t
 
	$div
 (
__numî
, 
__díom
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

855 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

857 #ifde‡
__USE_ISOC99


858 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

859 
__díom
)

860 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

864 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

865 || 
deföed
 
__USE_MISC


872 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

873 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

878 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

879 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

884 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

885 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

888 #ifde‡
__USE_MISC


890 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

894 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

895 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

896 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

897 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

902 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

905 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

906 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

907 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

909 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

910 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

911 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

912 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

914 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

915 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

922 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

925 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

926 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

929 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

933 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW


935 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

937 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

938 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

939 
__THROW


940 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

942 #ifde‡
__USE_MISC


947 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


958 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

959 *c⁄° *
__ª°ri˘
 
__tokís
,

960 **
__ª°ri˘
 
__vÆuï
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

967 #ifde‡
__USE_XOPEN2KXSI


969 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

972 #ifde‡
__USE_XOPEN_EXTENDED


977 
	$gø¡±
 (
__fd
Ë
__THROW
;

981 
	$u∆ock±
 (
__fd
Ë
__THROW
;

986 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

989 #ifde‡
__USE_GNU


993 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

994 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

997 
	`gë±
 ();

1000 #ifde‡
__USE_MISC


1004 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1005 
__THROW
 
	`__n⁄nuŒ
 ((1));

1008 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1011 
	$ây¶Ÿ
 (Ë
__THROW
;

1014 
	~<bôs/°dlib-Êﬂt.h
>

1017 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1018 
	~<bôs/°dlib.h
>

1021 
	~<bôs/Êﬂä.h
>

1022 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

1023 
	~<bôs/°dlib-ldbl.h
>

1026 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 4));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

68 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


71 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

72 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__OPTIMIZE__


77 
__exã∫_Æways_ölöe
 *

78 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


80  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

83 
__exã∫_Æways_ölöe
 const *

84 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


86  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

89 
	}
}

91 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

92 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 #ifde‡
__USE_GNU


98 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


99 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

100 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

104 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


110 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

111 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

112 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

113 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

114 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

115 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

119 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

154 #ifde‡
__USE_XOPEN2K8


156 
	~<bôs/ty≥s/loˇÀ_t.h
>

159 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

160 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

163 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

164 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4))

165 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

168 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

169 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

207 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


210 *
°rchr
 (*
__s
, 
__c
)

211 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

212 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

215 #ifde‡
__OPTIMIZE__


216 
__exã∫_Æways_ölöe
 *

217 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


219  
__buûtö_°rchr
 (
__s
, 
__c
);

222 
__exã∫_Æways_ölöe
 const *

223 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

230 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

231 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


237 *
	`°ºchr
 (*
__s
, 
__c
)

238 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

242 #ifde‡
__OPTIMIZE__


243 
__exã∫_Æways_ölöe
 *

244 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


246  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

249 
__exã∫_Æways_ölöe
 const *

250 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
	}
}

257 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

258 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 #ifde‡
__USE_GNU


264 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


265 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

266 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

267 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

281 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


287 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

288 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__OPTIMIZE__


293 
__exã∫_Æways_ölöe
 *

294 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


296  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

299 
__exã∫_Æways_ölöe
 const *

300 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


302  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

305 
	}
}

307 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

308 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


314 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

315 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

316 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

317 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__OPTIMIZE__


320 
__exã∫_Æways_ölöe
 *

321 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


323  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

326 
__exã∫_Æways_ölöe
 const *

327 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


329  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

332 
	}
}

334 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

335 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

340 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

341 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

346 c⁄° *
__ª°ri˘
 
__dñim
,

347 **
__ª°ri˘
 
__ßve_±r
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

349 #ifde‡
__USE_POSIX


350 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

355 #ifde‡
__USE_GNU


357 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


358 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

359 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

360 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

361 c⁄° *
__√edÀ
)

362 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

365 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 #ifde‡
__USE_GNU


373 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

374 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

375 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3))

376 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2))

377 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 3, 4));

381 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

382 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 
size_t
 
	$°æí
 (c⁄° *
__s
)

392 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

394 #ifdef 
__USE_XOPEN2K8


397 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

403 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

404 #ifde‡
__USE_XOPEN2K


412 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


415 #ifde‡
__REDIRECT_NTH


416 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

417 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

418 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2))

419 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

421 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

423 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

428 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

429 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

432 #ifde‡
__USE_GNU


434 c⁄° *
	$°ªº‹desc_≈
 (
__îr
Ë
__THROW
;

436 c⁄° *
	$°ªº‹«me_≈
 (
__îr
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN2K8


442 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

445 #ifde‡
__USE_MISC


446 
	~<°rögs.h
>

450 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

451 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

455 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

456 c⁄° *
__ª°ri˘
 
__dñim
)

457 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

460 #ifdef 
__USE_XOPEN2K8


462 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

464 #ifde‡
__USE_GNU


466 c⁄° *
	$sigabbªv_≈
 (
__sig
Ë
__THROW
;

469 c⁄° *
	$sigdes¸_≈
 (
__sig
Ë
__THROW
;

473 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

475 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

476 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

480 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

481 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

482 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

483 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

484 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

488 #ifdef 
__USE_GNU


490 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

491 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

494 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

497 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

498 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

500 #i‚de‡
ba£«me


505 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


506 "C++" *
	$ba£«me
 (*
__fûíame
)

507 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

508 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

509 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

511 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

516 #i‡
	`__GNUC_PREREQ
 (3,4)

517 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


519 
	~<bôs/°rög_f‹tifõd.h
>

523 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/floatn.h

19 #i‚de‡
_BITS_FLOATN_H


20 
	#_BITS_FLOATN_H


	)

22 
	~<„©uªs.h
>

29 #i‡(
deföed
 
__x86_64__
 \

30 ? 
__GNUC_PREREQ
 (4, 3) \

31 : (
deföed
 
__GNU__
 ? 
	$__GNUC_PREREQ
 (4, 5Ë: 
	$__GNUC_PREREQ
 (4, 4)))

32 
	#__HAVE_FLOAT128
 1

	)

34 
	#__HAVE_FLOAT128
 0

	)

39 #i‡
__HAVE_FLOAT128


40 
	#__HAVE_DISTINCT_FLOAT128
 1

	)

42 
	#__HAVE_DISTINCT_FLOAT128
 0

	)

48 
	#__HAVE_FLOAT64X
 1

	)

54 
	#__HAVE_FLOAT64X_LONG_DOUBLE
 1

	)

56 #i‚de‡
__ASSEMBLER__


60 #i‡
__HAVE_FLOAT128


61 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


63 
	#__f128
(
x
Ëx##
q


	)

65 
	#__f128
(
x
Ëx##
f128


	)

70 #i‡
__HAVE_FLOAT128


71 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


74 
_Com∂ex
 
	t__cÊﬂt128
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__TC__
)));

75 
	#__CFLOAT128
 
__cÊﬂt128


	)

77 
	#__CFLOAT128
 
_Com∂ex
 
_Flﬂt128


	)

82 #i‡
__HAVE_FLOAT128


85 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


86 
__Êﬂt128
 
	t_Flﬂt128
;

90 #i‡!
	`__GNUC_PREREQ
 (7, 0)

91 
	#__buûtö_huge_vÆf128
(Ë((
_Flﬂt128
Ë
	`__buûtö_huge_vÆ
 ())

	)

99 #i‡!
	`__GNUC_PREREQ
 (7, 0)

100 
	#__buûtö_c›ysignf128
 
__buûtö_c›ysignq


	)

101 
	#__buûtö_Ábsf128
 
__buûtö_Ábsq


	)

102 
	#__buûtö_öff128
(Ë((
_Flﬂt128
Ë
	`__buûtö_öf
 ())

	)

103 
	#__buûtö_«nf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«n
 (x))

	)

104 
	#__buûtö_«nsf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«ns
 (x))

	)

111 #i‡!
	`__GNUC_PREREQ
 (6, 0)

112 
	#__buûtö_signbôf128
 
__signbôf128


	)

119 
	~<bôs/Êﬂä-comm⁄.h
>

	@/usr/include/bits/getopt_posix.h

20 #i‚de‡
_GETOPT_POSIX_H


21 
	#_GETOPT_POSIX_H
 1

	)

23 #i‡!
deföed
 
_UNISTD_H
 && !deföed 
_STDIO_H


27 
	~<bôs/gë›t_c‹e.h
>

29 
	g__BEGIN_DECLS


31 #i‡
deföed
 
__USE_POSIX2
 && !deföed 
__USE_POSIX_IMPLICITLY
 \

32 && !
deföed
 
	g__USE_GNU
 && !deföed 
	g_GETOPT_H


37 #ifde‡
__REDIRECT


38 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

39 c⁄° *
__sh‹t›ts
),

40 
__posix_gë›t
);

42 
	$__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

43 c⁄° *
__sh‹t›ts
)

44 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

45 
	#gë›t
 
__posix_gë›t


	)

49 
__END_DECLS


	@/usr/include/bits/libc-header-start.h

27 #i‚de‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #unde‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 
	~<„©uªs.h
>

37 #unde‡
__GLIBC_USE_LIB_EXT2


38 #i‡(
deföed
 
__USE_GNU
 \

39 || (
deföed
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 
	#__GLIBC_USE_LIB_EXT2
 0

	)

49 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT


50 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_BFP_EXT__


51 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

53 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

55 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT_C2X


56 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| __GLIBC_USE (
ISOC2X
)

57 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 1

	)

59 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 0

	)

66 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_FUNCS_EXT__


68 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

70 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

72 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X


73 #i‡
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT
Ë|| __GLIBC_USE (
ISOC2X
)

74 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 1

	)

76 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 0

	)

81 #unde‡
__GLIBC_USE_IEC_60559_TYPES_EXT


82 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_TYPES_EXT__


83 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

85 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/bits/stdint-intn.h

19 #i‚de‡
_BITS_STDINT_INTN_H


20 
	#_BITS_STDINT_INTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__öt8_t
 
	töt8_t
;

25 
__öt16_t
 
	töt16_t
;

26 
__öt32_t
 
	töt32_t
;

27 
__öt64_t
 
	töt64_t
;

	@/usr/include/bits/stdint-uintn.h

19 #i‚de‡
_BITS_STDINT_UINTN_H


20 
	#_BITS_STDINT_UINTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__uöt8_t
 
	tuöt8_t
;

25 
__uöt16_t
 
	tuöt16_t
;

26 
__uöt32_t
 
	tuöt32_t
;

27 
__uöt64_t
 
	tuöt64_t
;

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

24 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

25 
	$__LDBL_REDIR_DECL
 (
•rötf
)

26 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

27 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

28 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

29 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

30 #i‡
deföed
 
__LDBL_COMPAT


31 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

32 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

33 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

34 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

35 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__isoc99_fsˇnfõì128
)

36 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__isoc99_sˇnfõì128
)

37 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__isoc99_ssˇnfõì128
)

39 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

42 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

43 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

44 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

47 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


48 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

49 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

52 #ifdef 
__USE_ISOC99


53 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

54 #i‡
deföed
 
__LDBL_COMPAT


55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

59 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__isoc99_vfsˇnfõì128
)

60 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__isoc99_vsˇnfõì128
)

61 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__isoc99_vssˇnfõì128
)

63 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

66 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

67 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

68 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

72 #ifde‡
__USE_XOPEN2K8


73 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

74 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

77 #ifde‡
__USE_GNU


78 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

79 
	$__LDBL_REDIR2_DECL
 (
a•rötf
)

80 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

81 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

82 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


86 
	$__LDBL_REDIR2_DECL
 (
•rötf_chk
)

87 
	$__LDBL_REDIR2_DECL
 (
v•rötf_chk
)

88 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


89 
	$__LDBL_REDIR2_DECL
 (
¢¥ötf_chk
)

90 
	$__LDBL_REDIR2_DECL
 (
v¢¥ötf_chk
)

92 #i‡
__USE_FORTIFY_LEVEL
 > 1

93 
	$__LDBL_REDIR2_DECL
 (
Ârötf_chk
)

94 
	$__LDBL_REDIR2_DECL
 (
¥ötf_chk
)

95 
	$__LDBL_REDIR2_DECL
 (
vÂrötf_chk
)

96 
	$__LDBL_REDIR2_DECL
 (
v¥ötf_chk
)

97 #ifde‡
__USE_XOPEN2K8


98 
	$__LDBL_REDIR2_DECL
 (
d¥ötf_chk
)

99 
	$__LDBL_REDIR2_DECL
 (
vd¥ötf_chk
)

101 #ifde‡
__USE_GNU


102 
	$__LDBL_REDIR2_DECL
 (
a•rötf_chk
)

103 
	$__LDBL_REDIR2_DECL
 (
va•rötf_chk
)

104 
	$__LDBL_REDIR2_DECL
 (
ob°ack_¥ötf_chk
)

105 
	$__LDBL_REDIR2_DECL
 (
ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_BITS_STDIO_H


20 
	#_BITS_STDIO_H
 1

	)

22 #i‚de‡
_STDIO_H


26 #i‚de‡
__exã∫_ölöe


27 
	#__STDIO_INLINE
 
ölöe


	)

29 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

33 #ifde‡
__USE_EXTERN_INLINES


36 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

38 
__STDIO_INLINE
 

39 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

41  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

42 
	}
}

46 
__STDIO_INLINE
 

47 
	$gëch¨
 ()

49  
	`gëc
 (
°dö
);

50 
	}
}

53 #ifde‡
__USE_MISC


55 
__STDIO_INLINE
 

56 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

58  
	`__gëc_u∆ocked_body
 (
__Â
);

59 
	}
}

63 #ifde‡
__USE_POSIX


65 
__STDIO_INLINE
 

66 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

68  
	`__gëc_u∆ocked_body
 (
__Â
);

69 
	}
}

72 
__STDIO_INLINE
 

73 
	$gëch¨_u∆ocked
 ()

75  
	`__gëc_u∆ocked_body
 (
°dö
);

76 
	}
}

81 
__STDIO_INLINE
 

82 
	$putch¨
 (
__c
)

84  
	`putc
 (
__c
, 
°dout
);

85 
	}
}

88 #ifde‡
__USE_MISC


90 
__STDIO_INLINE
 

91 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

93  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

94 
	}
}

98 #ifde‡
__USE_POSIX


100 
__STDIO_INLINE
 

101 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

103  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

104 
	}
}

107 
__STDIO_INLINE
 

108 
	$putch¨_u∆ocked
 (
__c
)

110  
	`__putc_u∆ocked_body
 (
__c
, 
°dout
);

111 
	}
}

115 #ifdef 
__USE_GNU


117 
__STDIO_INLINE
 
__ssize_t


118 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

120  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

121 
	}
}

125 #ifde‡
__USE_MISC


127 
__STDIO_INLINE
 

128 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

130  
	`__„of_u∆ocked_body
 (
__°ªam
);

131 
	}
}

134 
__STDIO_INLINE
 

135 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

137  
	`__„º‹_u∆ocked_body
 (
__°ªam
);

138 
	}
}

144 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

145 && !
deföed
 
	g__˝lu•lus


147 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

148 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

149 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

150 && (
size_t
Ë(
size
) != 0) \

151 ? ({ *
__±r
 = (*Ë(
±r
); \

152 
FILE
 *
__°ªam
 = (
°ªam
); \

153 
size_t
 
__˙t
; \

154 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

155 
__˙t
 > 0; --__cnt) \

157 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
); \

158 i‡(
__c
 =
EOF
) \

160 *
__±r
++ = 
__c
; \

162 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

163 / (
size_t
Ë(
size
); }) \

164 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

165 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

167 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

168 (Ë(
n
), (
size_t
) 0) \

169 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

171 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

172 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

173 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

174 && (
size_t
Ë(
size
) != 0) \

175 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

176 
FILE
 *
__°ªam
 = (
°ªam
); \

177 
size_t
 
__˙t
; \

178 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

179 
__˙t
 > 0; --__cnt) \

180 i‡(
	`putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

182 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

183 / (
size_t
Ë(
size
); }) \

184 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

185 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

187 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

188 (Ë(
n
), (
size_t
) 0) \

189 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

193 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_BITS_STDIO2_H


20 
	#_BITS_STDIO2_H
 1

	)

22 #i‚de‡
_STDIO_H


26 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW


28 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

29 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

30 c⁄° *
__ª°ri˘
 
__f‹m©
,

31 
__gnuc_va_li°
 
__≠
Ë
__THROW


32 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

34 #ifde‡
__va_¨g_∑ck


35 
__f‹tify_fun˘i⁄
 

36 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

38  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

39 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

40 
	}
}

41 #ñi‡!
deföed
 
__˝lu•lus


42 
	#•rötf
(
°r
, ...) \

43 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

44 
__VA_ARGS__
)

	)

47 
__f‹tify_fun˘i⁄
 

48 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

49 
__gnuc_va_li°
 
__≠
))

51  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

52 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

53 
	}
}

55 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


57 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

58 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

59 ...Ë
__THROW


60 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

61 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

62 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

63 
__gnuc_va_li°
 
__≠
Ë
__THROW
;

65 #ifde‡
__va_¨g_∑ck


66 
__f‹tify_fun˘i⁄
 

67 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

68 c⁄° *
__ª°ri˘
 
__fmt
, ...))

70  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

71 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

72 
	}
}

73 #ñi‡!
deföed
 
__˝lu•lus


74 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

75 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

76 
__VA_ARGS__
)

	)

79 
__f‹tify_fun˘i⁄
 

80 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

81 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

83  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

84 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

85 
	}
}

89 #i‡
__USE_FORTIFY_LEVEL
 > 1

91 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

92 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

93 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

94 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

95 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__≠
);

96 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

97 
__gnuc_va_li°
 
__≠
);

99 #ifde‡
__va_¨g_∑ck


100 
__f‹tify_fun˘i⁄
 

101 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

103  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

104 
	`__va_¨g_∑ck
 ());

105 
	}
}

107 
__f‹tify_fun˘i⁄
 

108 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

110  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

111 
	}
}

112 #ñi‡!
deföed
 
__˝lu•lus


113 
	#¥ötf
(...) \

114 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

115 
	#Ârötf
(
°ªam
, ...) \

116 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

119 
__f‹tify_fun˘i⁄
 

120 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

122 #ifde‡
__USE_EXTERN_INLINES


123  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

125  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

127 
	}
}

129 
__f‹tify_fun˘i⁄
 

130 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

131 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

133  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

134 
	}
}

136 #ifde‡
__USE_XOPEN2K8


137 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

138 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

139 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

140 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

141 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

143 #ifde‡
__va_¨g_∑ck


144 
__f‹tify_fun˘i⁄
 

145 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

147  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

148 
	`__va_¨g_∑ck
 ());

149 
	}
}

150 #ñi‡!
deföed
 
__˝lu•lus


151 
	#d¥ötf
(
fd
, ...) \

152 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

155 
__f‹tify_fun˘i⁄
 

156 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

158  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

159 
	}
}

162 #ifde‡
__USE_GNU


164 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

165 c⁄° *
__ª°ri˘
 
__fmt
, ...)

166 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

167 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

168 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

169 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

170 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

171 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

173 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

174 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

175 
__Êag
,

176 c⁄° *
__ª°ri˘
 
__f‹m©
,

177 
__gnuc_va_li°
 
__¨gs
)

178 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

180 #ifde‡
__va_¨g_∑ck


181 
__f‹tify_fun˘i⁄
 

182 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

184  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

185 
	`__va_¨g_∑ck
 ());

186 
	}
}

188 
__f‹tify_fun˘i⁄
 

189 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

192  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

193 
	`__va_¨g_∑ck
 ());

194 
	}
}

196 
__f‹tify_fun˘i⁄
 

197 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

198 c⁄° *
__ª°ri˘
 
__fmt
, ...))

200  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

201 
	`__va_¨g_∑ck
 ());

202 
	}
}

203 #ñi‡!
deföed
 
__˝lu•lus


204 
	#a•rötf
(
±r
, ...) \

205 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
	#__a•rötf
(
±r
, ...) \

207 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

208 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

209 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

212 
__f‹tify_fun˘i⁄
 

213 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

214 
__gnuc_va_li°
 
__≠
))

216  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

217 
	}
}

219 
__f‹tify_fun˘i⁄
 

220 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

221 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

223  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

224 
__≠
);

225 
	}
}

231 #i‡
__GLIBC_USE
 (
DEPRECATED_GETS
)

232 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

233 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

234 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

237 
__f‹tify_fun˘i⁄
 
__wur
 *

238 
	$gës
 (*
__°r
)

240 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

241  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

242  
	`__gës_w¨n
 (
__°r
);

243 
	}
}

246 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

247 
FILE
 *
__ª°ri˘
 
__°ªam
)

248 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

249 *
	`__REDIRECT
 (
__fgës_Æüs
,

250 (*
__ª°ri˘
 
__s
, 
__n
,

251 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
)

252 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

253 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

254 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

255 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

256 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

259 
__f‹tify_fun˘i⁄
 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2)) *

260 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

262 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

264 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

265  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

267 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

268  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

270  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

271 
	}
}

273 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

274 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

276 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

277 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

278 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

279 
‰ód
Ë
__wur
;

280 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

281 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

282 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
),

284 
__‰ód_chk
)

285 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

288 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


289 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

290 
FILE
 *
__ª°ri˘
 
__°ªam
)

292 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

294 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

295 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

296 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

297  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

299 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

300  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

302  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

303 
	}
}

305 #ifde‡
__USE_GNU


306 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

307 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
)

308 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

309 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

310 (*
__ª°ri˘
 
__s
, 
__n
,

311 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
)

312 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

313 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

314 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

315 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

316 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

319 
__f‹tify_fun˘i⁄
 
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2)) *

320 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

322 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

324 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

325  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

327 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

328  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

330  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

331 
	}
}

334 #ifde‡
__USE_MISC


335 #unde‡
‰ód_u∆ocked


336 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

337 
size_t
 
__size
, size_à
__n
,

338 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

339 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

340 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

341 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

342 
‰ód_u∆ocked
Ë
__wur
;

343 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

344 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

345 
size_t
 
__size
, size_à
__n
,

346 
FILE
 *
__ª°ri˘
 
__°ªam
),

347 
__‰ód_u∆ocked_chk
)

348 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

351 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


352 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

353 
FILE
 *
__ª°ri˘
 
__°ªam
)

355 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

357 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

358 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

359 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

360  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

361 
__°ªam
);

363 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

364  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

365 
__°ªam
);

368 #ifde‡
__USE_EXTERN_INLINES


369 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

370 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

371 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

372 && 
__size
 * 
__n
 <= 8)

374 
size_t
 
__˙t
 = 
__size
 * 
__n
;

375 *
__˝å
 = (*Ë
__±r
;

376 i‡(
__˙t
 == 0)

379 ; 
__˙t
 > 0; --__cnt)

381 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
);

382 i‡(
__c
 =
EOF
)

384 *
__˝å
++ = 
__c
;

386  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

389  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

390 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‚de‡
_BITS_STDIO_LIM_H


19 
	#_BITS_STDIO_LIM_H
 1

	)

21 #i‚de‡
_STDIO_H


25 
	#L_tm≤am
 20

	)

26 
	#TMP_MAX
 238328

	)

27 
	#FILENAME_MAX
 4096

	)

29 #ifde‡
__USE_POSIX


30 
	#L_˘îmid
 9

	)

31 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


32 
	#L_cu£rid
 9

	)

36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__exã∫_ölöe
 

25 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

27  
	`°πod
 (
__≈å
, (**Ë
NULL
);

28 
	}
}

	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 #ifde‡
__LDBL_COMPAT


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
__°πoõì128
)

31 #ifde‡
__USE_GNU


32 #ifde‡
__LDBL_COMPAT


33 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

35 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
__°πoõì128_l
)

39 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

40 #ifde‡
__LDBL_COMPAT


41 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
°r‰omd
)

43 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
__°r‰omõì128
)

47 #ifde‡
__USE_MISC


48 #i‡
deföed
 
__LDBL_COMPAT


49 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

50 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

51 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

52 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

53 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

54 #ñi‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

55 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
__qecvtõì128
)

56 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
__qfcvtõì128
)

57 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
__qgcvtõì128
)

58 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
__qecvtõì128_r
)

59 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
__qfcvtõì128_r
)

61 #îr‹ 
bôs
/
°dlib
-
ldbl
.
h
 
ö˛uded
 
whí
 
no
Üdb»
ªdúe˘i⁄s
 
¨e
 
ªquúed
.

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2))

54 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__f‹tify_fun˘i⁄
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__f‹tify_fun˘i⁄
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 c⁄° *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW


102 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

103 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

104 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

105 c⁄° *
__ª°ri˘
 
__§c
,

106 
size_t
 
__Àn
), 
mb°owcs
)

107 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

108 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

109 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

110 c⁄° *
__ª°ri˘
 
__§c
,

111 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

112 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

115 
__f‹tify_fun˘i⁄
 
size_t


116 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

117 
size_t
 
__Àn
))

119 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

121 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

122  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

123 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

125 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

126  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

127 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

129  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

130 
	}
}

133 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

134 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

135 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW


136 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
), 
wc°ombs
)

141 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

142 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

143 (*
__ª°ri˘
 
__d°
,

144 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

145 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

146 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

148 
__f‹tify_fun˘i⁄
 
size_t


149 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

154 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

155  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

156 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

157  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

159  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

160 
	}
}

	@/usr/include/bits/string_fortified.h

18 #i‚de‡
_BITS_STRING_FORTIFIED_H


19 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #i‚de‡
_STRING_H


25 #i‡!
__GNUC_PREREQ
 (5,0)

26 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

30 
__f‹tify_fun˘i⁄
 *

31 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

32 
size_t
 
__Àn
))

34  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

35 
	}
}

37 
__f‹tify_fun˘i⁄
 *

38 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

40  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

41 
	}
}

43 #ifde‡
__USE_GNU


44 
__f‹tify_fun˘i⁄
 *

45 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

46 
size_t
 
__Àn
))

48  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

49 
	}
}

58 
__f‹tify_fun˘i⁄
 *

59 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

63 #i‡!
	`__GNUC_PREREQ
 (5,0)

64 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

65 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

67 
	`__w¨n_mem£t_zîo_Àn
 ();

68  
__de°
;

71  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

72 
	}
}

74 #ifde‡
__USE_MISC


75 
	~<bôs/°rögs_f‹tifõd.h
>

77 
	$__ex∂icô_bzîo_chk
 (*
__de°
, 
size_t
 
__Àn
, size_à
__de°Àn
)

78 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

80 
__f‹tify_fun˘i⁄
 

81 
	`__NTH
 (
	$ex∂icô_bzîo
 (*
__de°
, 
size_t
 
__Àn
))

83 
	`__ex∂icô_bzîo_chk
 (
__de°
, 
__Àn
, 
	`__bos0
 (__dest));

84 
	}
}

87 
__f‹tify_fun˘i⁄
 *

88 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

90  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

91 
	}
}

93 #ifde‡
__USE_GNU


94 
__f‹tify_fun˘i⁄
 *

95 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

97  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

98 
	}
}

102 
__f‹tify_fun˘i⁄
 *

103 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

104 
size_t
 
__Àn
))

106  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

107 
	}
}

110 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

111 
size_t
 
__de°Àn
Ë
__THROW


112 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3)Ë__©å_ac˚s†((
__ªad_⁄ly__
, 2));

113 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

114 
size_t
 
__n
), 
°≤˝y
);

116 
__f‹tify_fun˘i⁄
 *

117 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

119 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

120 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

121  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

122  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

123 
	}
}

126 
__f‹tify_fun˘i⁄
 *

127 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

129  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

130 
	}
}

133 
__f‹tify_fun˘i⁄
 *

134 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

135 
size_t
 
__Àn
))

137  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

138 
	}
}

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/timesize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 
__öt8_t
 
	t__öt_Àa°8_t
;

53 
__uöt8_t
 
	t__uöt_Àa°8_t
;

54 
__öt16_t
 
	t__öt_Àa°16_t
;

55 
__uöt16_t
 
	t__uöt_Àa°16_t
;

56 
__öt32_t
 
	t__öt_Àa°32_t
;

57 
__uöt32_t
 
	t__uöt_Àa°32_t
;

58 
__öt64_t
 
	t__öt_Àa°64_t
;

59 
__uöt64_t
 
	t__uöt_Àa°64_t
;

62 #i‡
__WORDSIZE
 == 64

63 
	t__quad_t
;

64 
	t__u_quad_t
;

66 
__exãnsi⁄__
 
	t__quad_t
;

67 
__exãnsi⁄__
 
	t__u_quad_t
;

71 #i‡
__WORDSIZE
 == 64

72 
	t__ötmax_t
;

73 
	t__uötmax_t
;

75 
__exãnsi⁄__
 
	t__ötmax_t
;

76 
__exãnsi⁄__
 
	t__uötmax_t
;

109 
	#__S16_TYPE
 

	)

110 
	#__U16_TYPE
 

	)

111 
	#__S32_TYPE
 

	)

112 
	#__U32_TYPE
 

	)

113 
	#__SLONGWORD_TYPE
 

	)

114 
	#__ULONGWORD_TYPE
 

	)

115 #i‡
__WORDSIZE
 == 32

116 
	#__SQUAD_TYPE
 
__öt64_t


	)

117 
	#__UQUAD_TYPE
 
__uöt64_t


	)

118 
	#__SWORD_TYPE
 

	)

119 
	#__UWORD_TYPE
 

	)

120 
	#__SLONG32_TYPE
 

	)

121 
	#__ULONG32_TYPE
 

	)

122 
	#__S64_TYPE
 
__öt64_t


	)

123 
	#__U64_TYPE
 
__uöt64_t


	)

126 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

127 #ñi‡
__WORDSIZE
 == 64

128 
	t__SQUAD_TYPE
 

	)

129 
	t__UQUAD_TYPE
 

	)

130 
	t__SWORD_TYPE
 

	)

131 
	t__UWORD_TYPE
 

	)

132 
	t__SLONG32_TYPE
 

	)

133 
	t__ULONG32_TYPE
 

	)

134 
	t__S64_TYPE
 

	)

135 
	t__U64_TYPE
 

	)

137 
	t__STD_TYPE
 

	)

141 
	~<bôs/ty≥sizes.h
>

142 
	~<bôs/time64.h
>

145 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

146 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

147 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

148 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

149 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

150 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

151 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

152 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

153 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

154 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

155 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

156 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

157 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

158 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

159 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

160 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

161 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

162 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

163 
__STD_TYPE
 
__SUSECONDS64_T_TYPE
 
	g__su£c⁄ds64_t
;

165 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

166 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

169 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

172 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

175 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

180 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

181 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

184 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

185 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

188 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

189 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

192 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

194 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

197 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

199 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

203 
__off64_t
 
	t__loff_t
;

204 *
	t__ˇddr_t
;

207 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

210 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

215 
	t__sig_©omic_t
;

220 #i‡
__TIMESIZE
 =64 && 
deföed
 
__LIBC


221 
	#__time64_t
 
__time_t


	)

222 #ñi‡
__TIMESIZE
 != 64

223 
__STD_TYPE
 
__TIME64_T_TYPE
 
	g__time64_t
;

226 #unde‡
__STD_TYPE


	@/usr/include/bits/types/FILE.h

1 #i‚de‡
__FILE_deföed


2 
	#__FILE_deföed
 1

	)

4 
	g_IO_FILE
;

7 
_IO_FILE
 
	tFILE
;

	@/usr/include/bits/types/__FILE.h

1 #i‚de‡
____FILE_deföed


2 
	#____FILE_deföed
 1

	)

4 
	g_IO_FILE
;

5 
_IO_FILE
 
	t__FILE
;

	@/usr/include/bits/types/__fpos64_t.h

1 #i‚de‡
_____Âos64_t_deföed


2 
	#_____Âos64_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos64_t


12 
__off64_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos64_t
;

	@/usr/include/bits/types/__fpos_t.h

1 #i‚de‡
_____Âos_t_deföed


2 
	#_____Âos_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos_t


12 
__off_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos_t
;

	@/usr/include/bits/types/cookie_io_functions_t.h

18 #i‚de‡
__cookõ_io_fun˘i⁄s_t_deföed


19 
	#__cookõ_io_fun˘i⁄s_t_deföed
 1

	)

21 
	~<bôs/ty≥s.h
>

27 
__ssize_t
 
	tcookõ_ªad_fun˘i⁄_t
 (*
	t__cookõ
, *
	t__buf
,

28 
	tsize_t
 
	t__nbyãs
);

36 
__ssize_t
 
	tcookõ_wrôe_fun˘i⁄_t
 (*
	t__cookõ
, c⁄° *
	t__buf
,

37 
	tsize_t
 
	t__nbyãs
);

45 
	tcookõ_£ek_fun˘i⁄_t
 (*
	t__cookõ
, 
	t__off64_t
 *
	t__pos
, 
	t__w
);

48 
	tcookõ_˛o£_fun˘i⁄_t
 (*
	t__cookõ
);

55 
	s_IO_cookõ_io_fun˘i⁄s_t


57 
cookõ_ªad_fun˘i⁄_t
 *
	mªad
;

58 
cookõ_wrôe_fun˘i⁄_t
 *
	mwrôe
;

59 
cookõ_£ek_fun˘i⁄_t
 *
	m£ek
;

60 
cookõ_˛o£_fun˘i⁄_t
 *
	m˛o£
;

61 } 
	tcookõ_io_fun˘i⁄s_t
;

	@/usr/include/bits/types/locale_t.h

19 #i‚de‡
_BITS_TYPES_LOCALE_T_H


20 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 
	~<bôs/ty≥s/__loˇÀ_t.h
>

24 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/types/struct_FILE.h

18 #i‚de‡
__°ru˘_FILE_deföed


19 
	#__°ru˘_FILE_deföed
 1

	)

25 #i‡
deföed
 
_IO_USE_OLD_IO_FILE
 && !deföed 
_LIBC


29 #i‡
deföed
 
_IO_lock_t_deföed
 && !deföed 
_LIBC


33 
	~<bôs/ty≥s.h
>

35 
	g_IO_FILE
;

36 
	g_IO_m¨kî
;

37 
	g_IO_codecvt
;

38 
	g_IO_wide_d©a
;

42 #i‚de‡
_IO_lock_t_deföed


43 
	t_IO_lock_t
;

49 
	s_IO_FILE


51 
	m_Êags
;

54 *
	m_IO_ªad_±r
;

55 *
	m_IO_ªad_íd
;

56 *
	m_IO_ªad_ba£
;

57 *
	m_IO_wrôe_ba£
;

58 *
	m_IO_wrôe_±r
;

59 *
	m_IO_wrôe_íd
;

60 *
	m_IO_buf_ba£
;

61 *
	m_IO_buf_íd
;

64 *
	m_IO_ßve_ba£
;

65 *
	m_IO_backup_ba£
;

66 *
	m_IO_ßve_íd
;

68 
_IO_m¨kî
 *
	m_m¨kîs
;

70 
_IO_FILE
 *
	m_chaö
;

72 
	m_fûío
;

73 
	m_Êags2
;

74 
__off_t
 
	m_ﬁd_off£t
;

77 
	m_cur_cﬁumn
;

78 sig√d 
	m_vèbÀ_off£t
;

79 
	m_sh‹tbuf
[1];

81 
_IO_lock_t
 *
	m_lock
;

82 #ifde‡
_IO_USE_OLD_IO_FILE


85 
	s_IO_FILE_com∂ëe


87 
_IO_FILE
 
	m_fûe
;

89 
__off64_t
 
	m_off£t
;

91 
_IO_codecvt
 *
	m_codecvt
;

92 
_IO_wide_d©a
 *
	m_wide_d©a
;

93 
_IO_FILE
 *
	m_‰ìªs_li°
;

94 *
	m_‰ìªs_buf
;

95 
size_t
 
	m__∑d5
;

96 
	m_mode
;

98 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

102 
	#__gëc_u∆ocked_body
(
_Â
) \

103 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
) \

104 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

106 
	#__putc_u∆ocked_body
(
_ch
, 
_Â
) \

107 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
) \

108 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

109 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

111 
	#_IO_EOF_SEEN
 0x0010

	)

112 
	#__„of_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

114 
	#_IO_ERR_SEEN
 0x0020

	)

115 
	#__„º‹_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

117 
	#_IO_USER_LOCK
 0x8000

	)

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

36 
	#__WNOTHREAD
 0x20000000

	)

38 
	#__WALL
 0x40000000

	)

39 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

7 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifde‡
__x86_64__


12 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 
	#__SYSCALL_WORDSIZE
 64

	)

16 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

42 
__loff_t
 
	tloff_t
;

45 #i‚de‡
__öo_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__öo_t
 
	töo_t
;

49 
__öo64_t
 
	töo_t
;

51 
	#__öo_t_deföed


	)

53 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


54 
__öo64_t
 
	töo64_t
;

55 
	#__öo64_t_deföed


	)

58 #i‚de‡
__dev_t_deföed


59 
__dev_t
 
	tdev_t
;

60 
	#__dev_t_deföed


	)

63 #i‚de‡
__gid_t_deföed


64 
__gid_t
 
	tgid_t
;

65 
	#__gid_t_deföed


	)

68 #i‚de‡
__mode_t_deföed


69 
__mode_t
 
	tmode_t
;

70 
	#__mode_t_deföed


	)

73 #i‚de‡
__∆ök_t_deföed


74 
__∆ök_t
 
	t∆ök_t
;

75 
	#__∆ök_t_deföed


	)

78 #i‚de‡
__uid_t_deföed


79 
__uid_t
 
	tuid_t
;

80 
	#__uid_t_deföed


	)

83 #i‚de‡
__off_t_deföed


84 #i‚de‡
__USE_FILE_OFFSET64


85 
__off_t
 
	toff_t
;

87 
__off64_t
 
	toff_t
;

89 
	#__off_t_deföed


	)

91 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


92 
__off64_t
 
	toff64_t
;

93 
	#__off64_t_deföed


	)

96 #i‚de‡
__pid_t_deföed


97 
__pid_t
 
	tpid_t
;

98 
	#__pid_t_deföed


	)

101 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

102 && !
deföed
 
__id_t_deföed


103 
__id_t
 
	tid_t
;

104 
	#__id_t_deföed


	)

107 #i‚de‡
__ssize_t_deföed


108 
__ssize_t
 
	tssize_t
;

109 
	#__ssize_t_deföed


	)

112 #ifdef 
__USE_MISC


113 #i‚de‡
__daddr_t_deföed


114 
__daddr_t
 
	tdaddr_t
;

115 
__ˇddr_t
 
	tˇddr_t
;

116 
	#__daddr_t_deföed


	)

120 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


121 
__key_t
 
	tkey_t
;

122 
	#__key_t_deföed


	)

125 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


126 
	~<bôs/ty≥s/˛ock_t.h
>

128 
	~<bôs/ty≥s/˛ockid_t.h
>

129 
	~<bôs/ty≥s/time_t.h
>

130 
	~<bôs/ty≥s/timî_t.h
>

132 #ifde‡
__USE_XOPEN


133 #i‚de‡
__u£c⁄ds_t_deföed


134 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

135 
	#__u£c⁄ds_t_deföed


	)

137 #i‚de‡
__su£c⁄ds_t_deföed


138 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

139 
	#__su£c⁄ds_t_deföed


	)

143 
	#__√ed_size_t


	)

144 
	~<°ddef.h
>

146 #ifde‡
__USE_MISC


148 
	tul⁄g
;

149 
	tush‹t
;

150 
	tuöt
;

155 
	~<bôs/°döt-öä.h
>

158 
__uöt8_t
 
	tu_öt8_t
;

159 
__uöt16_t
 
	tu_öt16_t
;

160 
__uöt32_t
 
	tu_öt32_t
;

161 
__uöt64_t
 
	tu_öt64_t
;

163 #i‡
__GNUC_PREREQ
 (2, 7)

164 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

166 
	tªgi°î_t
;

171 
	#__BIT_TYPES_DEFINED__
 1

	)

174 #ifdef 
__USE_MISC


176 
	~<ídün.h
>

179 
	~<sys/£À˘.h
>

183 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

184 && !
deföed
 
__blksize_t_deföed


185 
__blksize_t
 
	tblksize_t
;

186 
	#__blksize_t_deföed


	)

190 #i‚de‡
__USE_FILE_OFFSET64


191 #i‚de‡
__blk˙t_t_deföed


192 
__blk˙t_t
 
	tblk˙t_t
;

193 
	#__blk˙t_t_deföed


	)

195 #i‚de‡
__fsblk˙t_t_deföed


196 
__fsblk˙t_t
 
	tfsblk˙t_t
;

197 
	#__fsblk˙t_t_deföed


	)

199 #i‚de‡
__fsfû˙t_t_deföed


200 
__fsfû˙t_t
 
	tfsfû˙t_t
;

201 
	#__fsfû˙t_t_deföed


	)

204 #i‚de‡
__blk˙t_t_deföed


205 
__blk˙t64_t
 
	tblk˙t_t
;

206 
	#__blk˙t_t_deföed


	)

208 #i‚de‡
__fsblk˙t_t_deföed


209 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

210 
	#__fsblk˙t_t_deföed


	)

212 #i‚de‡
__fsfû˙t_t_deföed


213 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

214 
	#__fsfû˙t_t_deföed


	)

218 #ifde‡
__USE_LARGEFILE64


219 
__blk˙t64_t
 
	tblk˙t64_t
;

220 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

221 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

226 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


227 
	~<bôs/±hªadty≥s.h
>

230 
	g__END_DECLS


	@/usr/include/bits/floatn-common.h

20 #i‚de‡
_BITS_FLOATN_COMMON_H


21 
	#_BITS_FLOATN_COMMON_H


	)

23 
	~<„©uªs.h
>

24 
	~<bôs/l⁄g-doubÀ.h
>

34 
	#__HAVE_FLOAT16
 0

	)

35 
	#__HAVE_FLOAT32
 1

	)

36 
	#__HAVE_FLOAT64
 1

	)

37 
	#__HAVE_FLOAT32X
 1

	)

38 
	#__HAVE_FLOAT128X
 0

	)

52 
	#__HAVE_DISTINCT_FLOAT16
 
__HAVE_FLOAT16


	)

53 
	#__HAVE_DISTINCT_FLOAT32
 0

	)

54 
	#__HAVE_DISTINCT_FLOAT64
 0

	)

55 
	#__HAVE_DISTINCT_FLOAT32X
 0

	)

56 
	#__HAVE_DISTINCT_FLOAT64X
 0

	)

57 
	#__HAVE_DISTINCT_FLOAT128X
 
__HAVE_FLOAT128X


	)

63 
	#__HAVE_FLOAT128_UNLIKE_LDBL
 (
__HAVE_DISTINCT_FLOAT128
 \

64 && 
__LDBL_MANT_DIG__
 !113)

	)

69 #i‡
__GNUC_PREREQ
 (7, 0Ë&& !
deföed
 
__˝lu•lus


70 
	#__HAVE_FLOATN_NOT_TYPEDEF
 1

	)

72 
	#__HAVE_FLOATN_NOT_TYPEDEF
 0

	)

75 #i‚de‡
__ASSEMBLER__


80 #i‡
__HAVE_FLOAT16


81 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


83 
	#__f16
(
x
Ë((
_Flﬂt16
Ëx##
f
)

	)

85 
	#__f16
(
x
Ëx##
f16


	)

89 #i‡
__HAVE_FLOAT32


90 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


91 
	#__f32
(
x
Ëx##
f


	)

93 
	#__f32
(
x
Ëx##
f32


	)

97 #i‡
__HAVE_FLOAT64


98 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
	#__f64
(
x
Ëx##
l


	)

102 
	#__f64
(
x
Ë
	)
x

105 
	#__f64
(
x
Ëx##
f64


	)

109 #i‡
__HAVE_FLOAT32X


110 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


111 
	#__f32x
(
x
Ë
	)
x

113 
	#__f32x
(
x
Ëx##
f32x


	)

117 #i‡
__HAVE_FLOAT64X


118 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


119 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


120 
	#__f64x
(
x
Ëx##
l


	)

122 
	#__f64x
(
x
Ë
	`__f128
 (x)

	)

125 
	#__f64x
(
x
Ëx##
f64x


	)

129 #i‡
__HAVE_FLOAT128X


130 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


133 
	#__f128x
(
x
Ëx##
f128x


	)

138 #i‡
__HAVE_FLOAT16


139 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


140 
_Com∂ex
 
	t__cÊﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HC__
)));

141 
	#__CFLOAT16
 
__cÊﬂt16


	)

143 
	#__CFLOAT16
 
_Com∂ex
 
_Flﬂt16


	)

147 #i‡
__HAVE_FLOAT32


148 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


149 
	#__CFLOAT32
 
_Com∂ex
 

	)

151 
	#__CFLOAT32
 
_Com∂ex
 
_Flﬂt32


	)

155 #i‡
__HAVE_FLOAT64


156 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


157 #ifde‡
__NO_LONG_DOUBLE_MATH


158 
	#__CFLOAT64
 
_Com∂ex
 

	)

160 
	#__CFLOAT64
 
_Com∂ex
 

	)

163 
	#__CFLOAT64
 
_Com∂ex
 
_Flﬂt64


	)

167 #i‡
__HAVE_FLOAT32X


168 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


169 
	#__CFLOAT32X
 
_Com∂ex
 

	)

171 
	#__CFLOAT32X
 
_Com∂ex
 
_Flﬂt32x


	)

175 #i‡
__HAVE_FLOAT64X


176 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


177 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


178 
	#__CFLOAT64X
 
_Com∂ex
 

	)

180 
	#__CFLOAT64X
 
__CFLOAT128


	)

183 
	#__CFLOAT64X
 
_Com∂ex
 
_Flﬂt64x


	)

187 #i‡
__HAVE_FLOAT128X


188 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


191 
	#__CFLOAT128X
 
_Com∂ex
 
_Flﬂt128x


	)

196 #i‡
__HAVE_FLOAT16


198 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


199 
	t_Flﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HF__
)));

202 #i‡!
__GNUC_PREREQ
 (7, 0)

203 
	#__buûtö_huge_vÆf16
(Ë((
_Flﬂt16
Ë
	`__buûtö_huge_vÆ
 ())

	)

204 
	#__buûtö_öff16
(Ë((
_Flﬂt16
Ë
	`__buûtö_öf
 ())

	)

205 
	#__buûtö_«nf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«n
 (x))

	)

206 
	#__buûtö_«nsf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«ns
 (x))

	)

211 #i‡
__HAVE_FLOAT32


213 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


214 
	t_Flﬂt32
;

217 #i‡!
__GNUC_PREREQ
 (7, 0)

218 
	#__buûtö_huge_vÆf32
(Ë(
	`__buûtö_huge_vÆf
 ())

	)

219 
	#__buûtö_öff32
(Ë(
	`__buûtö_öff
 ())

	)

220 
	#__buûtö_«nf32
(
x
Ë(
	`__buûtö_«nf
 (x))

	)

221 
	#__buûtö_«nsf32
(
x
Ë(
	`__buûtö_«nsf
 (x))

	)

226 #i‡
__HAVE_FLOAT64


235 #ifde‡
__NO_LONG_DOUBLE_MATH


237 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


238 
	t_Flﬂt64
;

241 #i‡!
__GNUC_PREREQ
 (7, 0)

242 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

243 
	#__buûtö_öff64
(Ë(
	`__buûtö_öÊ
 ())

	)

244 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

245 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

250 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


251 
	t_Flﬂt64
;

254 #i‡!
__GNUC_PREREQ
 (7, 0)

255 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

256 
	#__buûtö_öff64
(Ë(
	`__buûtö_öf
 ())

	)

257 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«n
 (x))

	)

258 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

265 #i‡
__HAVE_FLOAT32X


267 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


268 
	t_Flﬂt32x
;

271 #i‡!
__GNUC_PREREQ
 (7, 0)

272 
	#__buûtö_huge_vÆf32x
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

273 
	#__buûtö_öff32x
(Ë(
	`__buûtö_öf
 ())

	)

274 
	#__buûtö_«nf32x
(
x
Ë(
	`__buûtö_«n
 (x))

	)

275 
	#__buûtö_«nsf32x
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

280 #i‡
__HAVE_FLOAT64X


282 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


284 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


285 
	t_Flﬂt64x
;

288 #i‡!
__GNUC_PREREQ
 (7, 0)

289 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

290 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öÊ
 ())

	)

291 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

292 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

297 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


298 
_Flﬂt128
 
	t_Flﬂt64x
;

301 #i‡!
__GNUC_PREREQ
 (7, 0)

302 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆf128
 ())

	)

303 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öff128
 ())

	)

304 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«nf128
 (x))

	)

305 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«nsf128
 (x))

	)

312 #i‡
__HAVE_FLOAT128X


314 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


318 #i‡!
__GNUC_PREREQ
 (7, 0)

319 
	#__buûtö_huge_vÆf128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_huge_vÆ
 ())

	)

320 
	#__buûtö_öff128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_öf
 ())

	)

321 
	#__buûtö_«nf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«n
 (x))

	)

322 
	#__buûtö_«nsf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«ns
 (x))

	)

	@/usr/include/bits/getopt_core.h

20 #i‚de‡
_GETOPT_CORE_H


21 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 *
›èrg
;

50 
›töd
;

55 
›ãº
;

59 
›t›t
;

91 
	$gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

92 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

94 
__END_DECLS


	@/usr/include/bits/pthreadtypes.h

19 #i‚de‡
_BITS_PTHREADTYPES_COMMON_H


20 
	#_BITS_PTHREADTYPES_COMMON_H
 1

	)

23 
	~<bôs/thªad-sh¨ed-ty≥s.h
>

27 
	t±hªad_t
;

34 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

35 
	m__Æign
;

36 } 
	t±hªad_muãx©å_t
;

43 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

44 
	m__Æign
;

45 } 
	t±hªad_c⁄d©å_t
;

49 
	t±hªad_key_t
;

53 
	t__ONCE_ALIGNMENT
 
	t±hªad_⁄˚_t
;

56 
	u±hªad_©å_t


58 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

59 
	m__Æign
;

61 #i‚de‡
__have_±hªad_©å_t


62 
±hªad_©å_t
 
	t±hªad_©å_t
;

63 
	#__have_±hªad_©å_t
 1

	)

69 
__±hªad_muãx_s
 
	m__d©a
;

70 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

71 
	m__Æign
;

72 } 
	t±hªad_muãx_t
;

77 
__±hªad_c⁄d_s
 
	m__d©a
;

78 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

79 
__exãnsi⁄__
 
	m__Æign
;

80 } 
	t±hªad_c⁄d_t
;

83 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 
__±hªad_rwlock_¨ch_t
 
	m__d©a
;

89 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

90 
	m__Æign
;

91 } 
	t±hªad_rwlock_t
;

95 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

96 
	m__Æign
;

97 } 
	t±hªad_rwlock©å_t
;

101 #ifde‡
__USE_XOPEN2K


103 vﬁ©ûê
	t±hªad_•ölock_t
;

110 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

111 
	m__Æign
;

112 } 
	t±hªad_b¨rõr_t
;

116 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

117 
	m__Æign
;

118 } 
	t±hªad_b¨rõøâr_t
;

	@/usr/include/bits/strings_fortified.h

19 #i‚de‡
__STRINGS_FORTIFIED


20 
	#__STRINGS_FORTIFIED
 1

	)

22 
__f‹tify_fun˘i⁄
 

23 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

25 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

26 
	}
}

28 
__f‹tify_fun˘i⁄
 

29 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

31 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

32 
	}
}

	@/usr/include/bits/time64.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TIME64_H


24 
	#_BITS_TIME64_H
 1

	)

28 #i‡
__TIMESIZE
 == 64

30 
	#__TIME64_T_TYPE
 
__TIME_T_TYPE


	)

33 
	#__TIME64_T_TYPE
 
__SQUAD_TYPE


	)

	@/usr/include/bits/timesize.h

19 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


21 
	#__TIMESIZE
 64

	)

24 
	#__TIMESIZE
 
__WORDSIZE


	)

	@/usr/include/bits/types/__locale_t.h

20 #i‚de‡
_BITS_TYPES___LOCALE_T_H


21 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

42 
__loˇÀ_°ru˘
 *
	t__loˇÀ_t
;

	@/usr/include/bits/types/__mbstate_t.h

1 #i‚de‡
____mb°©e_t_deföed


2 
	#____mb°©e_t_deföed
 1

	)

8 #i‚de‡
__WINT_TYPE__


9 
	#__WINT_TYPE__
 

	)

15 
	m__cou¡
;

18 
__WINT_TYPE__
 
	m__wch
;

19 
	m__wchb
[4];

20 } 
	m__vÆue
;

21 } 
	t__mb°©e_t
;

	@/usr/include/bits/types/clock_t.h

1 #i‚de‡
__˛ock_t_deföed


2 
	#__˛ock_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ock_t
 
	t˛ock_t
;

	@/usr/include/bits/types/clockid_t.h

1 #i‚de‡
__˛ockid_t_deföed


2 
	#__˛ockid_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ockid_t
 
	t˛ockid_t
;

	@/usr/include/bits/types/time_t.h

1 #i‚de‡
__time_t_deföed


2 
	#__time_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__time_t
 
	ttime_t
;

	@/usr/include/bits/types/timer_t.h

1 #i‚de‡
__timî_t_deföed


2 
	#__timî_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__timî_t
 
	ttimî_t
;

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__SUSECONDS64_T_TYPE
 
__SQUAD_TYPE


	)

68 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

69 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

70 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

71 
	#__TIMER_T_TYPE
 *

	)

72 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

73 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

74 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

77 #ifde‡
__x86_64__


81 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

84 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

90 
	#__STATFS_MATCHES_STATFS64
 1

	)

93 
	#__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64
 1

	)

95 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

97 
	#__STATFS_MATCHES_STATFS64
 0

	)

99 
	#__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64
 0

	)

103 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ídün.h
>

26 #ifde‡
__USE_MISC


27 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

28 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

29 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

30 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

33 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


35 
	~<bôs/byãsw≠.h
>

36 
	~<bôs/uöä-idítôy.h
>

38 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


39 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

40 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

41 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

42 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

44 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

45 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

46 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

47 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

49 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

50 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

51 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

52 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

55 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

56 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

57 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

58 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

60 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

61 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

62 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

63 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

65 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

66 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

67 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

68 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

120 #unde‡
__USE_ISOC11


121 #unde‡
__USE_ISOC99


122 #unde‡
__USE_ISOC95


123 #unde‡
__USE_ISOCXX11


124 #unde‡
__USE_POSIX


125 #unde‡
__USE_POSIX2


126 #unde‡
__USE_POSIX199309


127 #unde‡
__USE_POSIX199506


128 #unde‡
__USE_XOPEN


129 #unde‡
__USE_XOPEN_EXTENDED


130 #unde‡
__USE_UNIX98


131 #unde‡
__USE_XOPEN2K


132 #unde‡
__USE_XOPEN2KXSI


133 #unde‡
__USE_XOPEN2K8


134 #unde‡
__USE_XOPEN2K8XSI


135 #unde‡
__USE_LARGEFILE


136 #unde‡
__USE_LARGEFILE64


137 #unde‡
__USE_FILE_OFFSET64


138 #unde‡
__USE_MISC


139 #unde‡
__USE_ATFILE


140 #unde‡
__USE_GNU


141 #unde‡
__USE_FORTIFY_LEVEL


142 #unde‡
__KERNEL_STRICT_NAMES


143 #unde‡
__GLIBC_USE_ISOC2X


144 #unde‡
__GLIBC_USE_DEPRECATED_GETS


145 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


149 #i‚de‡
_LOOSE_KERNEL_NAMES


150 
	#__KERNEL_STRICT_NAMES


	)

160 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


161 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

162 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

164 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

171 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

173 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

175 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

179 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

185 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

186 && !
deföed
 
	g_DEFAULT_SOURCE


188 #unde‡
_DEFAULT_SOURCE


189 
	#_DEFAULT_SOURCE
 1

	)

193 #ifde‡
_GNU_SOURCE


194 #unde‡
_ISOC95_SOURCE


195 
	#_ISOC95_SOURCE
 1

	)

196 #unde‡
_ISOC99_SOURCE


197 
	#_ISOC99_SOURCE
 1

	)

198 #unde‡
_ISOC11_SOURCE


199 
	#_ISOC11_SOURCE
 1

	)

200 #unde‡
_ISOC2X_SOURCE


201 
	#_ISOC2X_SOURCE
 1

	)

202 #unde‡
_POSIX_SOURCE


203 
	#_POSIX_SOURCE
 1

	)

204 #unde‡
_POSIX_C_SOURCE


205 
	#_POSIX_C_SOURCE
 200809L

	)

206 #unde‡
_XOPEN_SOURCE


207 
	#_XOPEN_SOURCE
 700

	)

208 #unde‡
_XOPEN_SOURCE_EXTENDED


209 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

210 #unde‡
_LARGEFILE64_SOURCE


211 
	#_LARGEFILE64_SOURCE
 1

	)

212 #unde‡
_DEFAULT_SOURCE


213 
	#_DEFAULT_SOURCE
 1

	)

214 #unde‡
_ATFILE_SOURCE


215 
	#_ATFILE_SOURCE
 1

	)

220 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

221 || (!
deföed
 
	g__STRICT_ANSI__
 \

222 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

223 && !
deföed
 
	g_ISOC2X_SOURCE
 \

224 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

225 && !
deföed
 
	g_XOPEN_SOURCE
))

226 #unde‡
_DEFAULT_SOURCE


227 
	#_DEFAULT_SOURCE
 1

	)

231 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

232 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

233 
	#__GLIBC_USE_ISOC2X
 1

	)

235 
	#__GLIBC_USE_ISOC2X
 0

	)

239 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

240 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

241 
	#__USE_ISOC11
 1

	)

245 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

246 || 
deföed
 
_ISOC2X_SOURCE
 \

247 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

248 
	#__USE_ISOC99
 1

	)

252 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

253 || 
deföed
 
_ISOC2X_SOURCE
 \

254 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

255 
	#__USE_ISOC95
 1

	)

258 #ifde‡
__˝lu•lus


260 #i‡
__˝lu•lus
 >= 201703L

261 
	#__USE_ISOC11
 1

	)

265 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


266 
	#__USE_ISOCXX11
 1

	)

267 
	#__USE_ISOC99
 1

	)

274 #ifde‡
_DEFAULT_SOURCE


275 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


276 
	#__USE_POSIX_IMPLICITLY
 1

	)

278 #unde‡
_POSIX_SOURCE


279 
	#_POSIX_SOURCE
 1

	)

280 #unde‡
_POSIX_C_SOURCE


281 
	#_POSIX_C_SOURCE
 200809L

	)

284 #i‡((!
deföed
 
__STRICT_ANSI__
 \

285 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

286 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

287 
	#_POSIX_SOURCE
 1

	)

288 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

289 
	#_POSIX_C_SOURCE
 2

	)

290 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

291 
	#_POSIX_C_SOURCE
 199506L

	)

292 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

293 
	#_POSIX_C_SOURCE
 200112L

	)

295 
	#_POSIX_C_SOURCE
 200809L

	)

297 
	#__USE_POSIX_IMPLICITLY
 1

	)

306 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

307 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

308 
	#_POSIX_SOURCE
 1

	)

309 #unde‡
_POSIX_C_SOURCE


310 
	#_POSIX_C_SOURCE
 199506L

	)

313 #i‡(
deföed
 
_POSIX_SOURCE
 \

314 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

315 || 
deföed
 
_XOPEN_SOURCE
)

316 
	#__USE_POSIX
 1

	)

319 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


320 
	#__USE_POSIX2
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

324 
	#__USE_POSIX199309
 1

	)

327 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

328 
	#__USE_POSIX199506
 1

	)

331 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

332 
	#__USE_XOPEN2K
 1

	)

333 #unde‡
__USE_ISOC95


334 
	#__USE_ISOC95
 1

	)

335 #unde‡
__USE_ISOC99


336 
	#__USE_ISOC99
 1

	)

339 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

340 
	#__USE_XOPEN2K8
 1

	)

341 #unde‡
_ATFILE_SOURCE


342 
	#_ATFILE_SOURCE
 1

	)

345 #ifdef 
_XOPEN_SOURCE


346 
	#__USE_XOPEN
 1

	)

347 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

348 
	#__USE_XOPEN_EXTENDED
 1

	)

349 
	#__USE_UNIX98
 1

	)

350 #unde‡
_LARGEFILE_SOURCE


351 
	#_LARGEFILE_SOURCE
 1

	)

352 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

353 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

354 
	#__USE_XOPEN2K8
 1

	)

355 
	#__USE_XOPEN2K8XSI
 1

	)

357 
	#__USE_XOPEN2K
 1

	)

358 
	#__USE_XOPEN2KXSI
 1

	)

359 #unde‡
__USE_ISOC95


360 
	#__USE_ISOC95
 1

	)

361 #unde‡
__USE_ISOC99


362 
	#__USE_ISOC99
 1

	)

365 #ifde‡
_XOPEN_SOURCE_EXTENDED


366 
	#__USE_XOPEN_EXTENDED
 1

	)

371 #ifde‡
_LARGEFILE_SOURCE


372 
	#__USE_LARGEFILE
 1

	)

375 #ifde‡
_LARGEFILE64_SOURCE


376 
	#__USE_LARGEFILE64
 1

	)

379 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

380 
	#__USE_FILE_OFFSET64
 1

	)

383 #i‡
deföed
 
_DEFAULT_SOURCE


384 
	#__USE_MISC
 1

	)

387 #ifdef 
_ATFILE_SOURCE


388 
	#__USE_ATFILE
 1

	)

391 #ifdef 
_GNU_SOURCE


392 
	#__USE_GNU
 1

	)

395 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

396 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

397 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

398 #ñi‡!
__GNUC_PREREQ
 (4, 1)

399 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


400 #ñi‡
_FORTIFY_SOURCE
 > 1

401 
	#__USE_FORTIFY_LEVEL
 2

	)

403 
	#__USE_FORTIFY_LEVEL
 1

	)

406 #i‚de‡
__USE_FORTIFY_LEVEL


407 
	#__USE_FORTIFY_LEVEL
 0

	)

414 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


415 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

417 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

432 #i‡(
deföed
 
__USE_GNU
 \

433 && (
deföed
 
	g__˝lu•lus
 \

434 ? (
	g__˝lu•lus
 < 201103L && !
deföed
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

435 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

436 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

438 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

443 
	~<°dc-¥edef.h
>

451 #unde‡
__GNU_LIBRARY__


452 
	#__GNU_LIBRARY__
 6

	)

456 
	#__GLIBC__
 2

	)

457 
	#__GLIBC_MINOR__
 32

	)

459 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

460 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

463 #i‚de‡
__ASSEMBLER__


464 #i‚de‡
_SYS_CDEFS_H


465 
	~<sys/cdefs.h
>

470 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


471 
	#__USE_LARGEFILE
 1

	)

472 
	#__USE_LARGEFILE64
 1

	)

478 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

479 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

480 && 
deföed
 
	g__exã∫_ölöe


481 
	#__USE_EXTERN_INLINES
 1

	)

489 
	~<gnu/°ubs.h
>

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/ty≥s/sig£t_t.h
>

36 
	~<bôs/ty≥s/time_t.h
>

37 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

38 #ifde‡
__USE_XOPEN2K


39 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

42 #i‚de‡
__su£c⁄ds_t_deföed


43 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

44 
	#__su£c⁄ds_t_deföed


	)

49 
	t__fd_mask
;

52 #unde‡
__NFDBITS


54 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

55 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

56 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

63 #ifde‡
__USE_XOPEN


64 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

65 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

67 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

68 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

70 } 
	tfd_£t
;

73 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

75 #ifde‡
__USE_MISC


77 
__fd_mask
 
	tfd_mask
;

80 
	#NFDBITS
 
__NFDBITS


	)

85 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

86 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

87 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

88 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

91 
__BEGIN_DECLS


101 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

102 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

103 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

104 
timevÆ
 *
__ª°ri˘
 
__timeout
);

106 #ifde‡
__USE_XOPEN2K


113 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

114 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

115 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

116 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

117 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

122 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


123 
	~<bôs/£À˘2.h
>

126 
	g__END_DECLS


	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	#__bsw≠_c⁄°™t_16
(
x
) \

31 ((
__uöt16_t
Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

33 
__ölöe
 
__uöt16_t


34 
	$__bsw≠_16
 (
__uöt16_t
 
__bsx
)

36 #i‡
	`__GNUC_PREREQ
 (4, 8)

37  
	`__buûtö_bsw≠16
 (
__bsx
);

39  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

41 
	}
}

44 
	#__bsw≠_c⁄°™t_32
(
x
) \

45 ((((
x
) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8) \

46 | (((
x
Ë& 0x0000ff00uË<< 8Ë| (((xË& 0x000000ffuË<< 24))

	)

48 
__ölöe
 
__uöt32_t


49 
	$__bsw≠_32
 (
__uöt32_t
 
__bsx
)

51 #i‡
	`__GNUC_PREREQ
 (4, 3)

52  
	`__buûtö_bsw≠32
 (
__bsx
);

54  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

56 
	}
}

59 
	#__bsw≠_c⁄°™t_64
(
x
) \

60 ((((
x
) & 0xff00000000000000ull) >> 56) \

61 | (((
x
) & 0x00ff000000000000ull) >> 40) \

62 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

63 | (((
x
) & 0x000000ff00000000ull) >> 8) \

64 | (((
x
) & 0x00000000ff000000ull) << 8) \

65 | (((
x
) & 0x0000000000ff0000ull) << 24) \

66 | (((
x
) & 0x000000000000ff00ull) << 40) \

67 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

69 
__exãnsi⁄__
 
__ölöe
 
__uöt64_t


70 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

72 #i‡
	`__GNUC_PREREQ
 (4, 3)

73  
	`__buûtö_bsw≠64
 (
__bsx
);

75  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

77 
	}
}

	@/usr/include/bits/endian.h

19 #i‚de‡
_BITS_ENDIAN_H


20 
	#_BITS_ENDIAN_H
 1

	)

30 
	#__LITTLE_ENDIAN
 1234

	)

31 
	#__BIG_ENDIAN
 4321

	)

32 
	#__PDP_ENDIAN
 3412

	)

35 
	~<bôs/ídü¬ess.h
>

39 #i‚de‡
__FLOAT_WORD_ORDER


40 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

43 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


44 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

45 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/bits/long-double.h

21 
	#__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 0

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


25 
	#__FD_ZERO
(
s
) \

27 
__i
; \

28 
fd_£t
 *
__¨r
 = (
s
); \

29 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

30 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

31 } 0)

	)

32 
	#__FD_SET
(
d
, 
s
) \

33 ((Ë(
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
(
d
)] |
	`__FD_MASK
(d)))

	)

34 
	#__FD_CLR
(
d
, 
s
) \

35 ((Ë(
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
(
d
)] &~
	`__FD_MASK
(d)))

	)

36 
	#__FD_ISSET
(
d
, 
s
) \

37 ((
	`__FDS_BITS
 (
s
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/thread-shared-types.h

19 #i‚de‡
_THREAD_SHARED_TYPES_H


20 
	#_THREAD_SHARED_TYPES_H
 1

	)

44 
	~<bôs/±hªadty≥s-¨ch.h
>

49 
	s__±hªad_öã∫Æ_li°


51 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

52 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

53 } 
	t__±hªad_li°_t
;

55 
	s__±hªad_öã∫Æ_¶i°


57 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

58 } 
	t__±hªad_¶i°_t
;

74 
	~<bôs/°ru˘_muãx.h
>

87 
	~<bôs/°ru˘_rwlock.h
>

92 
	s__±hªad_c⁄d_s


94 
__exãnsi⁄__
 union

96 
__exãnsi⁄__
 
	m__w£q
;

99 
	m__low
;

100 
	m__high
;

101 } 
	m__w£q32
;

103 
__exãnsi⁄__
 union

105 
__exãnsi⁄__
 
	m__g1_°¨t
;

108 
	m__low
;

109 
	m__high
;

110 } 
	m__g1_°¨t32
;

112 
	m__g_ªfs
[2] 
	m__LOCK_ALIGNMENT
;

113 
	m__g_size
[2];

114 
	m__g1_‹ig_size
;

115 
	m__wªfs
;

116 
	m__g_sig«ls
[2];

119 
	t__tss_t
;

120 
	t__thrd_t
;

124 
__d©a
 
	m__ONCE_ALIGNMENT
;

125 } 
	t__⁄˚_Êag
;

127 
	#__ONCE_FLAG_INIT
 { 0 }

	)

	@/usr/include/bits/types/sigset_t.h

1 #i‚de‡
__sig£t_t_deföed


2 
	#__sig£t_t_deföed
 1

	)

4 
	~<bôs/ty≥s/__sig£t_t.h
>

7 
__sig£t_t
 
	tsig£t_t
;

	@/usr/include/bits/types/struct_timespec.h

2 #i‚de‡
_STRUCT_TIMESPEC


3 
	#_STRUCT_TIMESPEC
 1

	)

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ídün.h
>

10 
	stime•ec


12 
__time_t
 
	mtv_£c
;

13 #i‡
__WORDSIZE
 == 64 \

14 || (
deföed
 
	m__SYSCALL_WORDSIZE
 && __SYSCALL_WORDSIZE == 64) \

15 || 
__TIMESIZE
 == 32

16 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

18 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


20 
	mtv_n£c
;

22 
	mtv_n£c
;

	@/usr/include/bits/types/struct_timeval.h

1 #i‚de‡
__timevÆ_deföed


2 
	#__timevÆ_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stimevÆ


10 
__time_t
 
	mtv_£c
;

11 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/uintn-identity.h

19 #i‡!
deföed
 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_UINTN_IDENTITY_H


24 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 
	~<bôs/ty≥s.h
>

32 
__ölöe
 
__uöt16_t


33 
	$__uöt16_idítôy
 (
__uöt16_t
 
__x
)

35  
__x
;

36 
	}
}

38 
__ölöe
 
__uöt32_t


39 
	$__uöt32_idítôy
 (
__uöt32_t
 
__x
)

41  
__x
;

42 
	}
}

44 
__ölöe
 
__uöt64_t


45 
	$__uöt64_idítôy
 (
__uöt64_t
 
__x
)

47  
__x
;

48 
	}
}

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

58 
	#__NTHNL
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__NTHNL
(
f˘
Ëf˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

69 
	#__NTHNL
(
f˘
Ë
	)
fct

75 #i‡(
deföed
 
__˝lu•lus
 \

76 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

77 
	#__ölöe
 
ölöe


	)

79 
	#__ölöe


	)

82 
	#__THROW


	)

83 
	#__THROWNL


	)

84 
	#__NTH
(
f˘
Ë
	)
fct

91 #i‡
deföed
 
__˛™g__
 && deföed 
__has_exãnsi⁄


92 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë
	`__has_exãnsi⁄
 (ext)

	)

94 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë0

	)

99 
	#__P
(
¨gs
Ë
	)
args

100 
	#__PMT
(
¨gs
Ë
	)
args

105 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

106 
	#__STRING
(
x
Ë#x

	)

109 
	#__±r_t
 *

	)

113 #ifdef 
__˝lu•lus


114 
	#__BEGIN_DECLS
 "C" {

	)

115 
	#__END_DECLS
 }

	)

117 
	#__BEGIN_DECLS


	)

118 
	#__END_DECLS


	)

123 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

124 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

126 #i‡
__GNUC_PREREQ
 (4,3)

127 
	#__w¨nde˛
(
«me
, 
msg
) \

128 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

129 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

130 
	#__îr‹de˛
(
«me
, 
msg
) \

131 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

133 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

134 
	#__w¨«âr
(
msg
)

	)

135 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

142 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

143 
	#__Êex¨r
 []

	)

144 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

145 #ñi‡
__GNUC_PREREQ
 (2,97)

148 
	#__Êex¨r
 []

	)

149 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

150 #ñi‡
deföed
 
__GNUC__


153 
	#__Êex¨r
 [0]

	)

154 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

157 
	#__Êex¨r
 [1]

	)

158 
	#__glibc_c99_Êex¨r_avaûabÀ
 0

	)

172 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

174 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

175 #ifde‡
__˝lu•lus


176 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

177 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

179 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

183 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

184 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

186 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

187 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

200 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

201 
	#__©åibuã__
(
xyz
Ë

	)

207 #i‡
__GNUC_PREREQ
 (2,96)

208 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

210 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (4, 3)

216 
	#__©åibuã_Æloc_size__
(
∑øms
) \

217 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

219 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

225 #i‡
__GNUC_PREREQ
 (2,96)

226 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

228 
	#__©åibuã_puª__


	)

232 #i‡
__GNUC_PREREQ
 (2,5)

233 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

235 
	#__©åibuã_c⁄°__


	)

241 #i‡
__GNUC_PREREQ
 (3,1)

242 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

243 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

246 
	#__©åibuã_noölöe__


	)

250 #i‡
__GNUC_PREREQ
 (3,2)

251 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

253 
	#__©åibuã_dïªˇãd__


	)

259 #i‡
__GNUC_PREREQ
 (4,5) \

260 || 
	$__glibc_˛™g_has_exãnsi⁄
 (
__©åibuã_dïªˇãd_wôh_mesßge__
)

261 
	#__©åibuã_dïªˇãd_msg__
(
msg
) \

262 
	`__©åibuã__
 ((
	`__dïªˇãd__
 (
msg
)))

	)

264 
	#__©åibuã_dïªˇãd_msg__
(
msg
Ë
__©åibuã_dïªˇãd__


	)

273 #i‡
	`__GNUC_PREREQ
 (2,8)

274 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

276 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

283 #i‡
	`__GNUC_PREREQ
 (2,97)

284 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

285 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

287 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

292 #i‡
	`__GNUC_PREREQ
 (3,3)

293 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

295 
	#__n⁄nuŒ
(
∑øms
)

	)

300 #i‡
	`__GNUC_PREREQ
 (3,4)

301 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

302 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

303 #i‡
__USE_FORTIFY_LEVEL
 > 0

304 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

307 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

309 #i‚de‡
__wur


310 
	#__wur


	)

314 #i‡
	`__GNUC_PREREQ
 (3,2)

318 #unde‡
__Æways_ölöe


319 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

321 #unde‡
__Æways_ölöe


322 
	#__Æways_ölöe
 
__ölöe


	)

327 #i‡
	`__GNUC_PREREQ
 (4,3)

328 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

330 
	#__©åibuã_¨tificül__


	)

342 #i‡(!
deföed
 
__˝lu•lus
 || 
	`__GNUC_PREREQ
 (4,3) \

343 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

344 || 
deföed
 
__GNUC_GNU_INLINE__
)))

345 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


346 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

347 
	#__exã∫_Æways_ölöe
 \

348 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

350 
	#__exã∫_ölöe
 
__ölöe


	)

351 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

355 #ifde‡
__exã∫_Æways_ölöe


356 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

361 #i‡
	`__GNUC_PREREQ
 (4,3)

362 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

363 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

370 #i‡!
	`__GNUC_PREREQ
 (2,8)

371 
	#__exãnsi⁄__


	)

375 #i‡!
	`__GNUC_PREREQ
 (2,92)

376 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

377 
	#__ª°ri˘
 
ª°ri˘


	)

379 
	#__ª°ri˘


	)

386 #i‡
	`__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


387 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

389 #ifde‡
__GNUC__


390 
	#__ª°ri˘_¨r


	)

392 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

393 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

396 
	#__ª°ri˘_¨r


	)

401 #i‡
__GNUC__
 >= 3

402 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

403 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

405 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

406 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

409 #ifde‡
__has_©åibuã


410 
	#__glibc_has_©åibuã
(
©å
Ë
	`__has_©åibuã
 (©å)

	)

412 
	#__glibc_has_©åibuã
(
©å
Ë0

	)

415 #i‡(!
deföed
 
_N‹ëu∫
 \

416 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

417 && !
	$__GNUC_PREREQ
 (4,7))

418 #i‡
	`__GNUC_PREREQ
 (2,8)

419 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

421 
	#_N‹ëu∫


	)

425 #i‡
	`__GNUC_PREREQ
 (8, 0)

429 
	#__©åibuã_n⁄°rög__
 
	`__©åibuã__
 ((
__n⁄°rög__
))

	)

431 
	#__©åibuã_n⁄°rög__


	)

435 #unde‡
__©åibuã_c›y__


436 #i‡
	`__GNUC_PREREQ
 (9, 0)

439 
	#__©åibuã_c›y__
(
¨g
Ë
	`__©åibuã__
 ((
	`__c›y__
 (¨g)))

	)

441 
	#__©åibuã_c›y__
(
¨g
)

	)

444 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

445 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

446 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

447 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

448 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

449 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

452 
	~<bôs/w‹dsize.h
>

453 
	~<bôs/l⁄g-doubÀ.h
>

455 #i‡
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

456 #ifde‡
__REDIRECT


459 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë... 
unu£d__ldbl_ªdú


	)

460 
	#__LDBL_REDIR_DECL
(
«me
) \

461 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__" #«mê"õì128"));

	)

464 
	#__LDBL_REDIR2_DECL
(
«me
) \

465 
	`__ty≥of
 (
__
##
«me
) __##name \

466 
	`__asm
 (
	`__ASMNAME
 ("__" #«mê"õì128"));

	)

469 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë... 
unu£d__ldbl_ªdú1


	)

470 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

471 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

473 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

474 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

475 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

476 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__
##
Æüs
##
õì128
)

	)

479 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë... 
unu£d__ªdúe˘_ldbl


	)

480 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë... 
unu£d__ldbl_ªdú_¡h


	)

483 
	`_Sètic_as£π
 (0, "IEEE 128-bitsÜong doubleÑequiresÑedirection onÅhisÖlatform");

485 #ñi‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


486 
	#__LDBL_COMPAT
 1

	)

487 #ifde‡
__REDIRECT


488 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

489 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

490 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

491 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

492 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

493 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

494 
	#__LDBL_REDIR2_DECL
(
«me
) \

495 
	`__ty≥of
 (
__
##
«me
Ë__##«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl___" #«me));

	)

496 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

497 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

498 
	#__LDBL_REDIR_DECL
(
«me
) \

499 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

500 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

501 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

502 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

503 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

506 #i‡(!
deföed
 
__LDBL_COMPAT
 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0) \

507 || !
deföed
 
__REDIRECT


508 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

509 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

510 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

511 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

512 
	#__LDBL_REDIR2_DECL
(
«me
)

	)

513 
	#__LDBL_REDIR_DECL
(
«me
)

	)

514 #ifde‡
__REDIRECT


515 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

516 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

517 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

526 #i‡
	`__GNUC_PREREQ
 (4,8Ë|| 
	`__glibc_˛™g_¥îeq
 (3,5)

527 
	#__glibc_ma¸o_w¨nög1
(
mesßge
Ë
	`_Pøgma
 (#mesßge)

	)

528 
	#__glibc_ma¸o_w¨nög
(
mesßge
) \

529 
	`__glibc_ma¸o_w¨nög1
 (
GCC
 
w¨nög
 
mesßge
)

	)

531 
	#__glibc_ma¸o_w¨nög
(
msg
)

	)

541 #i‡!
deföed
 
__˝lu•lus
 \

542 && (
	`__GNUC_PREREQ
 (4, 9) \

543 || 
	`__glibc_˛™g_has_exãnsi⁄
 (
c_gíîic_£À˘i⁄s
) \

544 || (!
deföed
 
__GNUC__
 && deföed 
__STDC_VERSION__
 \

545 && 
__STDC_VERSION__
 >= 201112L))

546 
	#__HAVE_GENERIC_SELECTION
 1

	)

548 
	#__HAVE_GENERIC_SELECTION
 0

	)

551 #i‡
	`__GNUC_PREREQ
 (10, 0)

557 
	#__©å_ac˚ss
(
x
Ë
	`__©åibuã__
 ((
__ac˚ss__
 x))

	)

559 
	#__©å_ac˚ss
(
x
)

	)

	@/usr/include/bits/endianness.h

1 #i‚de‡
_BITS_ENDIANNESS_H


2 
	#_BITS_ENDIANNESS_H
 1

	)

4 #i‚de‡
_BITS_ENDIAN_H


9 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/pthreadtypes-arch.h

18 #i‚de‡
_BITS_PTHREADTYPES_ARCH_H


19 
	#_BITS_PTHREADTYPES_ARCH_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

28 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

30 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

31 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

32 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

37 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

38 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

39 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

41 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

42 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

43 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

44 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

45 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

47 
	#__LOCK_ALIGNMENT


	)

48 
	#__ONCE_ALIGNMENT


	)

50 #i‚de‡
__x86_64__


52 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/struct_mutex.h

19 #i‚de‡
_THREAD_MUTEX_INTERNAL_H


20 
	#_THREAD_MUTEX_INTERNAL_H
 1

	)

22 
	s__±hªad_muãx_s


24 
	m__lock
;

25 
	m__cou¡
;

26 
	m__ow√r
;

27 #ifde‡
__x86_64__


28 
	m__nu£rs
;

32 
	m__köd
;

33 #ifde‡
__x86_64__


34 
	m__•ös
;

35 
	m__ñisi⁄
;

36 
__±hªad_li°_t
 
	m__li°
;

37 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

39 
	m__nu£rs
;

40 
__exãnsi⁄__
 union

44 
	m__e•ös
;

45 
	m__ìlisi⁄
;

46 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

47 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ìlisi⁄


	)

48 } 
	m__ñisi⁄_d©a
;

49 
__±hªad_¶i°_t
 
	m__li°
;

51 
	#__PTHREAD_MUTEX_HAVE_PREV
 0

	)

55 #ifde‡
__x86_64__


56 
	#__PTHREAD_MUTEX_INITIALIZER
(
__köd
) \

57 0, 0, 0, 0, 
__köd
, 0, 0, { 0, 0 }

	)

59 
	#__PTHREAD_MUTEX_INITIALIZER
(
__köd
) \

60 0, 0, 0, 
__köd
, 0, { { 0, 0 } }

	)

	@/usr/include/bits/struct_rwlock.h

20 #i‚de‡
_RWLOCK_INTERNAL_H


21 
	#_RWLOCK_INTERNAL_H


	)

23 
	s__±hªad_rwlock_¨ch_t


25 
	m__ªadîs
;

26 
	m__wrôîs
;

27 
	m__wΩha£_fuãx
;

28 
	m__wrôîs_fuãx
;

29 
	m__∑d3
;

30 
	m__∑d4
;

31 #ifde‡
__x86_64__


32 
	m__cur_wrôî
;

33 
	m__sh¨ed
;

34 sig√d 
	m__rwñisi⁄
;

35 #ifde‡ 
__ILP32__


36 
	m__∑d1
[3];

37 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

39 
	m__∑d1
[7];

40 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

42 
	m__∑d2
;

45 
	m__Êags
;

49 
	m__Êags
;

50 
	m__sh¨ed
;

51 sig√d 
	m__rwñisi⁄
;

52 
	m__∑d2
;

53 
	m__cur_wrôî
;

57 #ifde‡
__x86_64__


58 
	#__PTHREAD_RWLOCK_INITIALIZER
(
__Êags
) \

59 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 
__Êags


	)

61 
	#__PTHREAD_RWLOCK_INITIALIZER
(
__Êags
) \

62 0, 0, 0, 0, 0, 0, 
__Êags
, 0, 0, 0, 0

	)

	@/usr/include/bits/types/__sigset_t.h

1 #i‚de‡
____sig£t_t_deföed


2 
	#____sig£t_t_deföed


	)

4 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

7 
	m__vÆ
[
_SIGSET_NWORDS
];

8 } 
	t__sig£t_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_fchÊags


	)

12 
	#__°ub_gây


	)

13 
	#__°ub_ªvoke


	)

14 
	#__°ub_£éogö


	)

15 
	#__°ub_sigªtu∫


	)

16 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_gây


	)

14 
	#__°ub_ªvoke


	)

15 
	#__°ub_£éogö


	)

16 
	#__°ub_sigªtu∫


	)

17 
	#__°ub_°ty


	)

	@
1
.
1
/usr/include
81
2319
xaxidma.c
xaxidma.h
xaxidma_bd.c
xaxidma_bd.h
xaxidma_bdring.c
xaxidma_bdring.h
xaxidma_g.c
xaxidma_hw.h
xaxidma_porting_guide.h
xaxidma_selftest.c
xaxidma_sinit.c
xdebug.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/alloca.h
/usr/include/bits/floatn.h
/usr/include/bits/getopt_posix.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/stdint-intn.h
/usr/include/bits/stdint-uintn.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string_fortified.h
/usr/include/bits/types.h
/usr/include/bits/types/FILE.h
/usr/include/bits/types/__FILE.h
/usr/include/bits/types/__fpos64_t.h
/usr/include/bits/types/__fpos_t.h
/usr/include/bits/types/cookie_io_functions_t.h
/usr/include/bits/types/locale_t.h
/usr/include/bits/types/struct_FILE.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/strings.h
/usr/include/sys/types.h
/usr/include/bits/floatn-common.h
/usr/include/bits/getopt_core.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/time64.h
/usr/include/bits/timesize.h
/usr/include/bits/types/__locale_t.h
/usr/include/bits/types/__mbstate_t.h
/usr/include/bits/types/clock_t.h
/usr/include/bits/types/clockid_t.h
/usr/include/bits/types/time_t.h
/usr/include/bits/types/timer_t.h
/usr/include/bits/typesizes.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/sys/select.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/long-double.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/thread-shared-types.h
/usr/include/bits/types/sigset_t.h
/usr/include/bits/types/struct_timespec.h
/usr/include/bits/types/struct_timeval.h
/usr/include/bits/uintn-identity.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/bits/endianness.h
/usr/include/bits/pthreadtypes-arch.h
/usr/include/bits/struct_mutex.h
/usr/include/bits/struct_rwlock.h
/usr/include/bits/types/__sigset_t.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
